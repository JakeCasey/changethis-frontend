{"ast":null,"code":"import { prodEndPoint, endpoint } from '../../config';\nimport fetch from 'isomorphic-fetch'; //fucky stuff going on here\n\nexport default (async (req, res) => {\n  try {\n    var newEndpoint = process.env.NODE_ENV === 'production' ? prodEndPoint : endpoint;\n    console.log(newEndpoint);\n    var url = req.url;\n    var fetchUrl = newEndpoint + url;\n    var fetchRes = await fetch(fetchUrl); // console.log(fetchRes);\n\n    const contentType = fetchRes.headers.get('content-type');\n    let response; // if (contentType.includes('text/html')) {\n    //   response = await fetchRes.text();\n    //   res.setHeader('Content-Type', 'text/html');\n    // }\n    // if (contentType.includes('text/css')) {\n    //   response = await fetchRes.text();\n    //   res.setHeader('Content-Type', 'text/css');\n    // }\n    // if (contentType.includes('image/png')) {\n    //   response = fetchRes.text();\n    //   res.setHeader('Content-Type', 'image/png');\n    // }\n\n    response = await fetchRes.text();\n    res.setHeader('Content-Type', contentType); // TODO: these are not serving the correct data formats;\n\n    console.log(contentType);\n\n    if (contentType.includes('image/jpeg')) {\n      console.log('jpeg');\n      res.setHeader('Content-Type', 'image/jpeg');\n      response = await fetchRes.blob();\n      res.send(response);\n      return;\n    }\n\n    if (contentType.includes('image/png')) {\n      console.log('png');\n      res.setHeader('Content-Type', 'image/png');\n      response = await fetchRes.blob();\n      res.send(response);\n      return;\n    }\n\n    res.send(response);\n  } catch (error) {// if (error) throw new Error(error);\n  }\n});","map":{"version":3,"sources":["/Users/jakecasey/Documents/Projects/Bugs/skeleton-key-frontend/pages/api/proxy.js"],"names":["prodEndPoint","endpoint","fetch","req","res","newEndpoint","process","env","NODE_ENV","console","log","url","fetchUrl","fetchRes","contentType","headers","get","response","text","setHeader","includes","blob","send","error"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,QAAvB,QAAuC,cAAvC;AACA,OAAOC,KAAP,MAAkB,kBAAlB,C,CAEA;;AACA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAI;AACF,QAAIC,WAAW,GACbC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCR,YAAxC,GAAuDC,QADzD;AAEAQ,IAAAA,OAAO,CAACC,GAAR,CAAYL,WAAZ;AACA,QAAIM,GAAG,GAAGR,GAAG,CAACQ,GAAd;AACA,QAAIC,QAAQ,GAAGP,WAAW,GAAGM,GAA7B;AAEA,QAAIE,QAAQ,GAAG,MAAMX,KAAK,CAACU,QAAD,CAA1B,CAPE,CAQF;;AACA,UAAME,WAAW,GAAGD,QAAQ,CAACE,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,CAApB;AAEA,QAAIC,QAAJ,CAXE,CAYF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,IAAAA,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAjB;AACAd,IAAAA,GAAG,CAACe,SAAJ,CAAc,cAAd,EAA8BL,WAA9B,EA1BE,CA4BF;;AAEAL,IAAAA,OAAO,CAACC,GAAR,CAAYI,WAAZ;;AAEA,QAAIA,WAAW,CAACM,QAAZ,CAAqB,YAArB,CAAJ,EAAwC;AACtCX,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAN,MAAAA,GAAG,CAACe,SAAJ,CAAc,cAAd,EAA8B,YAA9B;AACAF,MAAAA,QAAQ,GAAG,MAAMJ,QAAQ,CAACQ,IAAT,EAAjB;AACAjB,MAAAA,GAAG,CAACkB,IAAJ,CAASL,QAAT;AACA;AACD;;AAED,QAAIH,WAAW,CAACM,QAAZ,CAAqB,WAArB,CAAJ,EAAuC;AACrCX,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAN,MAAAA,GAAG,CAACe,SAAJ,CAAc,cAAd,EAA8B,WAA9B;AACAF,MAAAA,QAAQ,GAAG,MAAMJ,QAAQ,CAACQ,IAAT,EAAjB;AACAjB,MAAAA,GAAG,CAACkB,IAAJ,CAASL,QAAT;AACA;AACD;;AAEDb,IAAAA,GAAG,CAACkB,IAAJ,CAASL,QAAT;AACD,GAjDD,CAiDE,OAAOM,KAAP,EAAc,CACd;AACD;AACF,CArDD","sourcesContent":["import { prodEndPoint, endpoint } from '../../config';\nimport fetch from 'isomorphic-fetch';\n\n//fucky stuff going on here\nexport default async (req, res) => {\n  try {\n    var newEndpoint =\n      process.env.NODE_ENV === 'production' ? prodEndPoint : endpoint;\n    console.log(newEndpoint);\n    var url = req.url;\n    var fetchUrl = newEndpoint + url;\n\n    var fetchRes = await fetch(fetchUrl);\n    // console.log(fetchRes);\n    const contentType = fetchRes.headers.get('content-type');\n\n    let response;\n    // if (contentType.includes('text/html')) {\n    //   response = await fetchRes.text();\n    //   res.setHeader('Content-Type', 'text/html');\n    // }\n    // if (contentType.includes('text/css')) {\n    //   response = await fetchRes.text();\n    //   res.setHeader('Content-Type', 'text/css');\n    // }\n    // if (contentType.includes('image/png')) {\n    //   response = fetchRes.text();\n    //   res.setHeader('Content-Type', 'image/png');\n    // }\n\n    response = await fetchRes.text();\n    res.setHeader('Content-Type', contentType);\n\n    // TODO: these are not serving the correct data formats;\n\n    console.log(contentType);\n\n    if (contentType.includes('image/jpeg')) {\n      console.log('jpeg');\n      res.setHeader('Content-Type', 'image/jpeg');\n      response = await fetchRes.blob();\n      res.send(response);\n      return;\n    }\n\n    if (contentType.includes('image/png')) {\n      console.log('png');\n      res.setHeader('Content-Type', 'image/png');\n      response = await fetchRes.blob();\n      res.send(response);\n      return;\n    }\n\n    res.send(response);\n  } catch (error) {\n    // if (error) throw new Error(error);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}