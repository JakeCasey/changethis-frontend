{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jakecasey/Documents/Projects/Bugs/skeleton-key-frontend/components/special/Toolbar.js\";\nimport React, { Component } from 'react';\nimport SickButton from '../styles/SickButton';\nimport styled from 'styled-components';\nimport withContainers from '../wrappers/withContainer';\nimport Global from './Global';\nimport ToolbarOverlay from './ToolbarOverlay';\nimport BlockList from './BlockList';\nimport btoa from 'btoa';\nimport Clipboard from 'react-clipboard.js'; // Blocks\n\nimport SimpleTextBlock from './SimpleTextBlock';\nimport PinBlock from './PinBlock';\nconst ToolbarDiv = styled.div.withConfig({\n  displayName: \"Toolbar__ToolbarDiv\",\n  componentId: \"sc-19q79xv-0\"\n})([\"width:100%;max-width:300px;z-index:10;background-color:#d2ddec;padding:40px;position:relative;p{margin:0px;}\"]);\n\nclass Toolbar extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      base64: ''\n    });\n\n    _defineProperty(this, \"showBlocks\", () => {\n      //place component in state\n      this.props.Global.putComponentInToolbar(React.createElement(BlockList, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      })); //open toolbar\n\n      this.props.Global.toggleToolbarOverlay();\n    });\n\n    _defineProperty(this, \"showCanvasOptions\", () => {});\n\n    _defineProperty(this, \"handlebase64Update\", e => {\n      this.setState({\n        base64: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"_updateState\", () => {\n      this.props.Global._loadStateFromHash(this.state.base64);\n    });\n  }\n\n  render() {\n    var canvas = this.props.Global;\n    var toolbar = this.props.Global.state.toolbar;\n    return React.createElement(ToolbarDiv, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, this.props.Global && this.props.Global.state.toolbar.map((block, i) => {\n      var type = block.type;\n\n      switch (type) {\n        case 'text':\n          return React.createElement(SimpleTextBlock, {\n            key: i,\n            block: block,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65\n            },\n            __self: this\n          });\n          break;\n\n        case 'pin':\n          return React.createElement(PinBlock, {\n            key: i,\n            block: block,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68\n            },\n            __self: this\n          });\n          break;\n      }\n    }), React.createElement(SickButton, {\n      onClick: () => this.showBlocks(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Add Block\"), React.createElement(\"p\", {\n      ref: textarea => this.textArea = textarea,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), this.props.Global && React.createElement(Clipboard, {\n      component: SickButton,\n      \"data-clipboard-text\": btoa(_JSON$stringify(this.props.Global.state)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"copy to clipboard\"), React.createElement(\"textarea\", {\n      onChange: e => this.handlebase64Update(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(SickButton, {\n      onClick: () => this._updateState(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, ' ', \"Update State From String\"));\n  }\n\n}\n\nexport default withContainers([Global])(Toolbar);","map":{"version":3,"sources":["/Users/jakecasey/Documents/Projects/Bugs/skeleton-key-frontend/components/special/Toolbar.js"],"names":["React","Component","SickButton","styled","withContainers","Global","ToolbarOverlay","BlockList","btoa","Clipboard","SimpleTextBlock","PinBlock","ToolbarDiv","div","Toolbar","base64","props","putComponentInToolbar","toggleToolbarOverlay","e","setState","target","value","_loadStateFromHash","state","render","canvas","toolbar","map","block","i","type","showBlocks","textarea","textArea","handlebase64Update","_updateState"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SickButton from '../styles/SickButton';\nimport styled from 'styled-components';\nimport withContainers from '../wrappers/withContainer';\nimport Global from './Global';\nimport ToolbarOverlay from './ToolbarOverlay';\nimport BlockList from './BlockList';\nimport btoa from 'btoa';\nimport Clipboard from 'react-clipboard.js';\n\n// Blocks\nimport SimpleTextBlock from './SimpleTextBlock';\nimport PinBlock from './PinBlock';\n\nconst ToolbarDiv = styled.div`\n  width: 100%;\n  max-width: 300px;\n  z-index: 10;\n  background-color: #d2ddec;\n  padding: 40px;\n  position: relative;\n\n  p {\n    margin: 0px;\n  }\n`;\n\nclass Toolbar extends Component {\n  // state = {\n  //   base64: btoa(JSON.stringify(this.props.Global.state)),\n  // };\n\n  state = {\n    base64: '',\n  };\n\n  showBlocks = () => {\n    //place component in state\n    this.props.Global.putComponentInToolbar(<BlockList />);\n\n    //open toolbar\n    this.props.Global.toggleToolbarOverlay();\n  };\n\n  showCanvasOptions = () => {};\n\n  handlebase64Update = e => {\n    this.setState({ base64: e.target.value });\n  };\n\n  _updateState = () => {\n    this.props.Global._loadStateFromHash(this.state.base64);\n  };\n\n  render() {\n    var canvas = this.props.Global;\n    var toolbar = this.props.Global.state.toolbar;\n    return (\n      <ToolbarDiv>\n        {this.props.Global &&\n          this.props.Global.state.toolbar.map((block, i) => {\n            var type = block.type;\n            switch (type) {\n              case 'text':\n                return <SimpleTextBlock key={i} block={block} />;\n                break;\n              case 'pin':\n                return <PinBlock key={i} block={block} />;\n                break;\n            }\n          })}\n\n        <SickButton onClick={() => this.showBlocks()}>Add Block</SickButton>\n        <p ref={textarea => (this.textArea = textarea)}>{}</p>\n        {this.props.Global && (\n          <Clipboard\n            component={SickButton}\n            data-clipboard-text={btoa(JSON.stringify(this.props.Global.state))}\n          >\n            copy to clipboard\n          </Clipboard>\n        )}\n\n        <textarea onChange={e => this.handlebase64Update(e)} />\n\n        <SickButton onClick={() => this._updateState()}>\n          {' '}\n          Update State From String\n        </SickButton>\n\n        {/* <ToolbarOverlay /> */}\n\n        {/* <ToolbarOverlay>\n          <SickButton\n            onClick={() => {\n              canvas.addPath();\n            }}\n          >\n            Add Rectangle\n          </SickButton>\n          <SickButton\n            onClick={() => {\n              canvas.clear();\n            }}\n          >\n            Clear\n          </SickButton>\n          <SickButton\n            onClick={() => {\n              canvas.addArrow();\n            }}\n          >\n            Add Arrow\n          </SickButton>\n        </ToolbarOverlay> */}\n      </ToolbarDiv>\n    );\n  }\n}\n\nexport default withContainers([Global])(Toolbar);\n"]},"metadata":{},"sourceType":"module"}