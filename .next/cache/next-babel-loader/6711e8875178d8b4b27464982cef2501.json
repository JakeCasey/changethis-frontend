{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport SickButton from '../styles/SickButton';\nimport styled from 'styled-components';\nimport withContainers from '../wrappers/withContainer';\nimport { Global as globalState } from './Global';\nimport ToolbarOverlay from './ToolbarOverlay';\nimport BlockList from './BlockList';\nimport btoa from 'btoa';\nimport Clipboard from 'react-clipboard.js'; // Blocks\n\nimport SimpleTextBlock from './SimpleTextBlock';\nimport PinBlock from './PinBlock';\nconst ToolbarDiv = styled.div.withConfig({\n  displayName: \"Toolbar__ToolbarDiv\",\n  componentId: \"sc-19q79xv-0\"\n})([\"width:100%;max-width:300px;z-index:10;background-color:#d2ddec;padding:40px;position:relative;p{margin:0px;}\"]);\n\nclass Toolbar extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      base64: ''\n    });\n\n    _defineProperty(this, \"showBlocks\", () => {\n      //place component in state\n      this.props.Global.putComponentInToolbar(React.createElement(BlockList, null)); //open toolbar\n\n      this.props.Global.toggleToolbarOverlay();\n    });\n\n    _defineProperty(this, \"showCanvasOptions\", () => {});\n\n    _defineProperty(this, \"handlebase64Update\", e => {\n      this.setState({\n        base64: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"_updateState\", () => {\n      this.props.Global._loadStateFromHash(this.state.base64);\n    });\n  }\n\n  render() {\n    var canvas = this.props.Global; // var toolbar = this.props.Global.state.toolbar;\n\n    return React.createElement(ToolbarDiv, null, this.props.Global && this.props.Global.state.toolbar.map((block, i) => {\n      var type = block.type;\n\n      switch (type) {\n        case 'text':\n          return React.createElement(SimpleTextBlock, {\n            key: i,\n            block: block\n          });\n          break;\n\n        case 'pin':\n          return React.createElement(PinBlock, {\n            key: i,\n            block: block\n          });\n          break;\n      }\n    }), React.createElement(SickButton, {\n      onClick: () => this.showBlocks()\n    }, \"Add Block\"), React.createElement(\"p\", {\n      ref: textarea => this.textArea = textarea\n    }), this.props.Global && React.createElement(Clipboard, {\n      component: SickButton,\n      \"data-clipboard-text\": btoa(_JSON$stringify(this.props.Global.state))\n    }, \"copy to clipboard\"), React.createElement(\"textarea\", {\n      onChange: e => this.handlebase64Update(e)\n    }), React.createElement(SickButton, {\n      onClick: () => this._updateState()\n    }, ' ', \"Update State From String\"), React.createElement(ToolbarOverlay, null));\n  }\n\n}\n\nexport default withContainers([globalState])(Toolbar);","map":null,"metadata":{},"sourceType":"module"}