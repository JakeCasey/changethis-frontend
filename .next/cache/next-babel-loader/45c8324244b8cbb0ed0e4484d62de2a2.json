{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/jakecasey/Documents/Projects/Bugs/skeleton-key-frontend/components/special/Toolbar.js\";\n\nimport React, { Component } from \"react\";\nimport SickButton from \"../styles/SickButton\";\nimport styled from \"styled-components\";\nimport withContainers from \"../wrappers/withContainer\";\nimport { Global as globalState } from \"./Global\";\nimport ToolbarOverlay from \"./ToolbarOverlay\";\nimport BlockList from \"./BlockList\";\nimport btoa from \"btoa\";\nimport Clipboard from \"react-clipboard.js\"; // Blocks\n\nimport SimpleTextBlock from \"./SimpleTextBlock\";\nimport PinBlock from \"./PinBlock\"; // const ToolbarDiv = styled.div`\n//   width: 100%;\n//   max-width: 300px;\n//   z-index: 10;\n//   background-color: #d2ddec;\n//   padding: 40px;\n//   position: relative;\n//   p {\n//     margin: 0px;\n//   }\n// `;\n\nvar ToolbarDiv = function ToolbarDiv() {\n  return React.createElement(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, _this.props.children);\n};\n\nvar Toolbar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Toolbar, _Component);\n\n  function Toolbar() {\n    var _getPrototypeOf2;\n\n    var _this2;\n\n    _classCallCheck(this, Toolbar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this2 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Toolbar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this2), \"state\", {\n      base64: \"\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"showBlocks\", function () {\n      //place component in state\n      _this2.props.test.putComponentInToolbar(React.createElement(BlockList, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      })); //open toolbar\n\n\n      _this2.props.test.toggleToolbarOverlay();\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"showCanvasOptions\", function () {});\n\n    _defineProperty(_assertThisInitialized(_this2), \"handlebase64Update\", function (e) {\n      _this2.setState({\n        base64: e.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"_updateState\", function () {\n      _this2.props.test._loadStateFromHash(_this2.state.base64);\n    });\n\n    return _this2;\n  }\n\n  _createClass(Toolbar, [{\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var canvas = this.props.test; // var toolbar = this.props.test.state.toolbar;\n\n      return React.createElement(ToolbarDiv, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, canvas && canvas.state.toolbar.map(function (block, i) {\n        var type = block.type;\n\n        switch (type) {\n          case \"text\":\n            return React.createElement(SimpleTextBlock, {\n              key: i,\n              block: block,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 69\n              },\n              __self: this\n            });\n            break;\n\n          case \"pin\":\n            return React.createElement(PinBlock, {\n              key: i,\n              block: block,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 72\n              },\n              __self: this\n            });\n            break;\n        }\n      }), React.createElement(SickButton, {\n        onClick: function onClick() {\n          return _this3.showBlocks();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Add Block\"), React.createElement(\"p\", {\n        ref: function ref(textarea) {\n          return _this3.textArea = textarea;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), this.props.test && React.createElement(Clipboard, {\n        component: SickButton,\n        \"data-clipboard-text\": btoa(_JSON$stringify(this.props.test.state)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"copy application state to clipboard\"), React.createElement(\"textarea\", {\n        onChange: function onChange(e) {\n          return _this3.handlebase64Update(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), React.createElement(SickButton, {\n        onClick: function onClick() {\n          return _this3._updateState();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \" \", \"Update State From String\"), React.createElement(ToolbarOverlay, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Toolbar;\n}(Component);\n\nexport default withContainers([globalState])(Toolbar);","map":{"version":3,"sources":["/Users/jakecasey/Documents/Projects/Bugs/skeleton-key-frontend/components/special/Toolbar.js"],"names":["React","Component","SickButton","styled","withContainers","Global","globalState","ToolbarOverlay","BlockList","btoa","Clipboard","SimpleTextBlock","PinBlock","ToolbarDiv","props","children","Toolbar","base64","test","putComponentInToolbar","toggleToolbarOverlay","e","setState","target","value","_loadStateFromHash","state","canvas","toolbar","map","block","i","type","showBlocks","textarea","textArea","handlebase64Update","_updateState"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SickButton from \"../styles/SickButton\";\nimport styled from \"styled-components\";\nimport withContainers from \"../wrappers/withContainer\";\nimport { Global as globalState } from \"./Global\";\nimport ToolbarOverlay from \"./ToolbarOverlay\";\nimport BlockList from \"./BlockList\";\nimport btoa from \"btoa\";\nimport Clipboard from \"react-clipboard.js\";\n\n// Blocks\nimport SimpleTextBlock from \"./SimpleTextBlock\";\nimport PinBlock from \"./PinBlock\";\n\n// const ToolbarDiv = styled.div`\n//   width: 100%;\n//   max-width: 300px;\n//   z-index: 10;\n//   background-color: #d2ddec;\n//   padding: 40px;\n//   position: relative;\n\n//   p {\n//     margin: 0px;\n//   }\n// `;\n\nconst ToolbarDiv = () => {\n  return <div className=\"\">{this.props.children}</div>;\n};\n\nclass Toolbar extends Component {\n  // state = {\n  //   base64: btoa(JSON.stringify(this.props.test.state)),\n  // };\n\n  state = {\n    base64: \"\"\n  };\n\n  showBlocks = () => {\n    //place component in state\n    this.props.test.putComponentInToolbar(<BlockList />);\n\n    //open toolbar\n    this.props.test.toggleToolbarOverlay();\n  };\n\n  showCanvasOptions = () => {};\n\n  handlebase64Update = e => {\n    this.setState({ base64: e.target.value });\n  };\n\n  _updateState = () => {\n    this.props.test._loadStateFromHash(this.state.base64);\n  };\n\n  render() {\n    let canvas = this.props.test;\n    // var toolbar = this.props.test.state.toolbar;\n    return (\n      <ToolbarDiv>\n        {canvas &&\n          canvas.state.toolbar.map((block, i) => {\n            var type = block.type;\n            switch (type) {\n              case \"text\":\n                return <SimpleTextBlock key={i} block={block} />;\n                break;\n              case \"pin\":\n                return <PinBlock key={i} block={block} />;\n                break;\n            }\n          })}\n\n        <SickButton onClick={() => this.showBlocks()}>Add Block</SickButton>\n        <p ref={textarea => (this.textArea = textarea)}>{}</p>\n        {this.props.test && (\n          <Clipboard\n            component={SickButton}\n            data-clipboard-text={btoa(JSON.stringify(this.props.test.state))}\n          >\n            copy application state to clipboard\n          </Clipboard>\n        )}\n\n        <textarea onChange={e => this.handlebase64Update(e)} />\n\n        <SickButton onClick={() => this._updateState()}>\n          {\" \"}\n          Update State From String\n        </SickButton>\n\n        <ToolbarOverlay />\n\n        {/* <ToolbarOverlay>\n          <SickButton\n            onClick={() => {\n              canvas.addPath();\n            }}\n          >\n            Add Rectangle\n          </SickButton>\n          <SickButton\n            onClick={() => {\n              canvas.clear();\n            }}\n          >\n            Clear\n          </SickButton>\n          <SickButton\n            onClick={() => {\n              canvas.addArrow();\n            }}\n          >\n            Add Arrow\n          </SickButton>\n        </ToolbarOverlay> */}\n      </ToolbarDiv>\n    );\n  }\n}\n\nexport default withContainers([globalState])(Toolbar);\n"]},"metadata":{},"sourceType":"module"}