{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jakecasey/Documents/Projects/Bugs/skeleton-key-frontend/components/special/Toolbar.js\";\nimport React, { Component } from \"react\";\nimport SickButton from \"../styles/SickButton\";\nimport styled from \"styled-components\";\nimport withContainers from \"../wrappers/withContainer\";\nimport { Global as globalState } from \"./Global\";\nimport ToolbarOverlay from \"./ToolbarOverlay\";\nimport BlockList from \"./BlockList\";\nimport btoa from \"btoa\";\nimport Clipboard from \"react-clipboard.js\"; // Blocks\n\nimport SimpleTextBlock from \"./SimpleTextBlock\";\nimport PinBlock from \"./PinBlock\"; // const ToolbarDiv = styled.div`\n//   width: 100%;\n//   max-width: 300px;\n//   z-index: 10;\n//   background-color: #d2ddec;\n//   padding: 40px;\n//   position: relative;\n//   p {\n//     margin: 0px;\n//   }\n// `;\n\nclass ToolbarDiv extends Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container w-1/5 flex flex-col  ml-8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n\nclass Toolbar extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      base64: \"\"\n    });\n\n    _defineProperty(this, \"showBlocks\", () => {\n      //place component in state\n      this.props.test.putComponentInToolbar(React.createElement(BlockList, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      })); //open toolbar\n\n      this.props.test.toggleToolbarOverlay();\n    });\n\n    _defineProperty(this, \"showCanvasOptions\", () => {});\n\n    _defineProperty(this, \"handlebase64Update\", e => {\n      this.setState({\n        base64: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"_updateState\", () => {\n      this.props.test._loadStateFromHash(this.state.base64);\n    });\n  }\n\n  render() {\n    let canvas = this.props.test; // var toolbar = this.props.test.state.toolbar;\n\n    return React.createElement(ToolbarDiv, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.showBlocks(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: \"0 0 24 24\",\n      class: \"icon-add-circle h-16 w-16\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      cx: \"12\",\n      cy: \"12\",\n      r: \"10\",\n      className: \"fill-current text-gray-300\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"path\", {\n      className: \"fill-current text-gray-500\",\n      d: \"M13 11h4a1 1 0 0 1 0 2h-4v4a1 1 0 0 1-2 0v-4H7a1 1 0 0 1 0-2h4V7a1 1 0 0 1 2 0v4z\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }))), canvas && canvas.state.toolbar.map((block, i) => {\n      var type = block.type;\n\n      switch (type) {\n        case \"text\":\n          return React.createElement(SimpleTextBlock, {\n            key: i,\n            block: block,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93\n            },\n            __self: this\n          });\n          break;\n\n        case \"pin\":\n          return React.createElement(PinBlock, {\n            key: i,\n            block: block,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 96\n            },\n            __self: this\n          });\n          break;\n      }\n    }), React.createElement(\"div\", {\n      className: \"toolbar_card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"flex justify-between mb-8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: \"0 0 24 24\",\n      className: \"w-10 h-10 mr-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"path\", {\n      className: \"fill-current text-gray-300\",\n      d: \"M6 2h6v6c0 1.1.9 2 2 2h6v10a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V4c0-1.1.9-2 2-2z\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(\"path\", {\n      className: \"fill-current text-gray-500\",\n      d: \"M13 15h2a1 1 0 0 1 0 2h-2v2a1 1 0 0 1-2 0v-2H9a1 1 0 0 1 0-2h2v-2a1 1 0 0 1 2 0v2z\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(\"polygon\", {\n      class: \"secondary\",\n      points: \"14 2 20 8 14 8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      className: \"toolbar_header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Save\")), this.props.test && React.createElement(React.Fragment, null, React.createElement(Clipboard, {\n      className: \"bg-blue-100 text-blue-700 py-2 px-4 rounded \",\n      \"data-clipboard-text\": btoa(_JSON$stringify(this.props.test.state)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"copy application state to clipboard\")), React.createElement(\"textarea\", {\n      onChange: e => this.handlebase64Update(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(SickButton, {\n      onClick: () => this._updateState(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \" \", \"Update State From String\")), React.createElement(ToolbarOverlay, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default withContainers([globalState])(Toolbar);","map":{"version":3,"sources":["/Users/jakecasey/Documents/Projects/Bugs/skeleton-key-frontend/components/special/Toolbar.js"],"names":["React","Component","SickButton","styled","withContainers","Global","globalState","ToolbarOverlay","BlockList","btoa","Clipboard","SimpleTextBlock","PinBlock","ToolbarDiv","render","props","children","Toolbar","base64","test","putComponentInToolbar","toggleToolbarOverlay","e","setState","target","value","_loadStateFromHash","state","canvas","showBlocks","toolbar","map","block","i","type","handlebase64Update","_updateState"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SickButton from \"../styles/SickButton\";\nimport styled from \"styled-components\";\nimport withContainers from \"../wrappers/withContainer\";\nimport { Global as globalState } from \"./Global\";\nimport ToolbarOverlay from \"./ToolbarOverlay\";\nimport BlockList from \"./BlockList\";\nimport btoa from \"btoa\";\nimport Clipboard from \"react-clipboard.js\";\n\n// Blocks\nimport SimpleTextBlock from \"./SimpleTextBlock\";\nimport PinBlock from \"./PinBlock\";\n\n// const ToolbarDiv = styled.div`\n//   width: 100%;\n//   max-width: 300px;\n//   z-index: 10;\n//   background-color: #d2ddec;\n//   padding: 40px;\n//   position: relative;\n\n//   p {\n//     margin: 0px;\n//   }\n// `;\n\nclass ToolbarDiv extends Component {\n  render() {\n    return (\n      <div className=\"container w-1/5 flex flex-col  ml-8\">\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nclass Toolbar extends Component {\n  // state = {\n  //   base64: btoa(JSON.stringify(this.props.test.state)),\n  // };\n\n  state = {\n    base64: \"\"\n  };\n\n  showBlocks = () => {\n    //place component in state\n    this.props.test.putComponentInToolbar(<BlockList />);\n\n    //open toolbar\n    this.props.test.toggleToolbarOverlay();\n  };\n\n  showCanvasOptions = () => {};\n\n  handlebase64Update = e => {\n    this.setState({ base64: e.target.value });\n  };\n\n  _updateState = () => {\n    this.props.test._loadStateFromHash(this.state.base64);\n  };\n\n  render() {\n    let canvas = this.props.test;\n    // var toolbar = this.props.test.state.toolbar;\n    return (\n      <ToolbarDiv>\n        <button onClick={() => this.showBlocks()}>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            class=\"icon-add-circle h-16 w-16\"\n          >\n            <circle\n              cx=\"12\"\n              cy=\"12\"\n              r=\"10\"\n              className=\"fill-current text-gray-300\"\n            />\n            <path\n              className=\"fill-current text-gray-500\"\n              d=\"M13 11h4a1 1 0 0 1 0 2h-4v4a1 1 0 0 1-2 0v-4H7a1 1 0 0 1 0-2h4V7a1 1 0 0 1 2 0v4z\"\n            />\n          </svg>\n        </button>\n        {canvas &&\n          canvas.state.toolbar.map((block, i) => {\n            var type = block.type;\n            switch (type) {\n              case \"text\":\n                return <SimpleTextBlock key={i} block={block} />;\n                break;\n              case \"pin\":\n                return <PinBlock key={i} block={block} />;\n                break;\n            }\n          })}\n\n        <div className=\"toolbar_card\">\n          <div className=\"flex justify-between mb-8\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              className=\"w-10 h-10 mr-4\"\n            >\n              <path\n                className=\"fill-current text-gray-300\"\n                d=\"M6 2h6v6c0 1.1.9 2 2 2h6v10a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V4c0-1.1.9-2 2-2z\"\n              />\n              <path\n                className=\"fill-current text-gray-500\"\n                d=\"M13 15h2a1 1 0 0 1 0 2h-2v2a1 1 0 0 1-2 0v-2H9a1 1 0 0 1 0-2h2v-2a1 1 0 0 1 2 0v2z\"\n              />\n              <polygon class=\"secondary\" points=\"14 2 20 8 14 8\" />\n            </svg>\n            <p className=\"toolbar_header\">Save</p>\n          </div>\n          {this.props.test && (\n            <>\n              <Clipboard\n                className=\"bg-blue-100 text-blue-700 py-2 px-4 rounded \"\n                data-clipboard-text={btoa(\n                  JSON.stringify(this.props.test.state)\n                )}\n              >\n                copy application state to clipboard\n              </Clipboard>\n            </>\n          )}\n\n          <textarea onChange={e => this.handlebase64Update(e)} />\n\n          <SickButton onClick={() => this._updateState()}>\n            {\" \"}\n            Update State From String\n          </SickButton>\n        </div>\n\n        <ToolbarOverlay />\n\n        {/* <ToolbarOverlay>\n          <SickButton\n            onClick={() => {\n              canvas.addPath();\n            }}\n          >\n            Add Rectangle\n          </SickButton>\n          <SickButton\n            onClick={() => {\n              canvas.clear();\n            }}\n          >\n            Clear\n          </SickButton>\n          <SickButton\n            onClick={() => {\n              canvas.addArrow();\n            }}\n          >\n            Add Arrow\n          </SickButton>\n        </ToolbarOverlay> */}\n      </ToolbarDiv>\n    );\n  }\n}\n\nexport default withContainers([globalState])(Toolbar);\n"]},"metadata":{},"sourceType":"module"}