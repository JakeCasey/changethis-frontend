{"ast":null,"code":"import withApollo from 'next-with-apollo';\nimport ApolloClient from 'apollo-boost';\nimport { endpoint, prodEndPoint } from '../config';\nimport { onError } from 'apollo-link-error';\nconst errorLink = onError(({\n  graphQLErrors,\n  networkError\n}) => {\n  if (networkError) {\n    // Check if error response is JSON\n    try {\n      JSON.parse(networkError.bodyText);\n    } catch (e) {\n      // If not replace parsing error message with real one\n      networkError.message = networkError.bodyText;\n    }\n  }\n});\n\nfunction createClient({\n  headers\n}) {\n  console.log(headers);\n  return new ApolloClient({\n    uri: process.env.NODE_ENV === 'development' ? endpoint : prodEndPoint,\n    request: operation => {\n      operation.setContext({\n        fetchOptions: {\n          credentials: 'include'\n        },\n        credentials: 'include',\n        headers: {\n          cookie: headers && headers.cookie\n        }\n      });\n    },\n    //local data\n    clientState: {\n      resolvers: {},\n      defaults: {\n        cartOpen: false\n      }\n    }\n  });\n}\n\nexport default withApollo(createClient);","map":{"version":3,"sources":["/Users/jakecasey/Documents/Projects/Bugs/skeleton-key-frontend/lib/withData.js"],"names":["withApollo","ApolloClient","endpoint","prodEndPoint","onError","errorLink","graphQLErrors","networkError","JSON","parse","bodyText","e","message","createClient","headers","console","log","uri","process","env","NODE_ENV","request","operation","setContext","fetchOptions","credentials","cookie","clientState","resolvers","defaults","cartOpen"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,WAAvC;AACA,SAASC,OAAT,QAAwB,mBAAxB;AAEA,MAAMC,SAAS,GAAGD,OAAO,CAAC,CAAC;AAAEE,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,CAAD,KAAqC;AAC7D,MAAIA,YAAJ,EAAkB;AAChB;AACA,QAAI;AACFC,MAAAA,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACG,QAAxB;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACV;AACAJ,MAAAA,YAAY,CAACK,OAAb,GAAuBL,YAAY,CAACG,QAApC;AACD;AACF;AACF,CAVwB,CAAzB;;AAYA,SAASG,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAmC;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,SAAO,IAAIb,YAAJ,CAAiB;AACtBgB,IAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GAAyClB,QAAzC,GAAoDC,YADnC;AAEtBkB,IAAAA,OAAO,EAAEC,SAAS,IAAI;AACpBA,MAAAA,SAAS,CAACC,UAAV,CAAqB;AACnBC,QAAAA,YAAY,EAAE;AACZC,UAAAA,WAAW,EAAE;AADD,SADK;AAInBA,QAAAA,WAAW,EAAE,SAJM;AAKnBX,QAAAA,OAAO,EAAE;AAAEY,UAAAA,MAAM,EAAEZ,OAAO,IAAIA,OAAO,CAACY;AAA7B;AALU,OAArB;AAOD,KAVqB;AAWtB;AACAC,IAAAA,WAAW,EAAE;AACXC,MAAAA,SAAS,EAAE,EADA;AAEXC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,QAAQ,EAAE;AADF;AAFC;AAZS,GAAjB,CAAP;AAmBD;;AAED,eAAe9B,UAAU,CAACa,YAAD,CAAzB","sourcesContent":["import withApollo from 'next-with-apollo';\nimport ApolloClient from 'apollo-boost';\nimport { endpoint, prodEndPoint } from '../config';\nimport { onError } from 'apollo-link-error';\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (networkError) {\n    // Check if error response is JSON\n    try {\n      JSON.parse(networkError.bodyText);\n    } catch (e) {\n      // If not replace parsing error message with real one\n      networkError.message = networkError.bodyText;\n    }\n  }\n});\n\nfunction createClient({ headers }) {\n  console.log(headers);\n  return new ApolloClient({\n    uri: process.env.NODE_ENV === 'development' ? endpoint : prodEndPoint,\n    request: operation => {\n      operation.setContext({\n        fetchOptions: {\n          credentials: 'include',\n        },\n        credentials: 'include',\n        headers: { cookie: headers && headers.cookie },\n      });\n    },\n    //local data\n    clientState: {\n      resolvers: {},\n      defaults: {\n        cartOpen: false,\n      },\n    },\n  });\n}\n\nexport default withApollo(createClient);\n"]},"metadata":{},"sourceType":"module"}