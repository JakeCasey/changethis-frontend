{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport SickButton from '../styles/SickButton';\nimport styled from 'styled-components';\nimport withContainers from '../wrappers/withContainer';\nimport { Global as globalState } from './Global';\nimport ToolbarOverlay from './ToolbarOverlay';\nimport BlockList from './BlockList';\nimport btoa from 'btoa';\nimport Clipboard from 'react-clipboard.js'; // Blocks\n\nimport SimpleTextBlock from './SimpleTextBlock';\nimport PinBlock from './PinBlock';\nvar ToolbarDiv = styled.div.withConfig({\n  displayName: \"Toolbar__ToolbarDiv\",\n  componentId: \"sc-19q79xv-0\"\n})([\"width:100%;max-width:300px;z-index:10;background-color:#d2ddec;padding:40px;position:relative;p{margin:0px;}\"]);\n\nvar Toolbar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Toolbar, _Component);\n\n  function Toolbar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Toolbar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Toolbar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      base64: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showBlocks\", function () {\n      //place component in state\n      _this.props.Global.putComponentInToolbar(React.createElement(BlockList, null)); //open toolbar\n\n\n      _this.props.Global.toggleToolbarOverlay();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showCanvasOptions\", function () {});\n\n    _defineProperty(_assertThisInitialized(_this), \"handlebase64Update\", function (e) {\n      _this.setState({\n        base64: e.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_updateState\", function () {\n      _this.props.Global._loadStateFromHash(_this.state.base64);\n    });\n\n    return _this;\n  }\n\n  _createClass(Toolbar, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var canvas = this.props.Global; // var toolbar = this.props.Global.state.toolbar;\n\n      return React.createElement(ToolbarDiv, null, this.props.Global && this.props.Global.state.toolbar.map(function (block, i) {\n        var type = block.type;\n\n        switch (type) {\n          case 'text':\n            return React.createElement(SimpleTextBlock, {\n              key: i,\n              block: block\n            });\n            break;\n\n          case 'pin':\n            return React.createElement(PinBlock, {\n              key: i,\n              block: block\n            });\n            break;\n        }\n      }), React.createElement(SickButton, {\n        onClick: function onClick() {\n          return _this2.showBlocks();\n        }\n      }, \"Add Block\"), React.createElement(\"p\", {\n        ref: function ref(textarea) {\n          return _this2.textArea = textarea;\n        }\n      }), this.props.Global && React.createElement(Clipboard, {\n        component: SickButton,\n        \"data-clipboard-text\": btoa(_JSON$stringify(this.props.Global.state))\n      }, \"copy to clipboard\"), React.createElement(\"textarea\", {\n        onChange: function onChange(e) {\n          return _this2.handlebase64Update(e);\n        }\n      }), React.createElement(SickButton, {\n        onClick: function onClick() {\n          return _this2._updateState();\n        }\n      }, ' ', \"Update State From String\"), React.createElement(ToolbarOverlay, null));\n    }\n  }]);\n\n  return Toolbar;\n}(Component);\n\nexport default withContainers([globalState])(Toolbar);","map":null,"metadata":{},"sourceType":"module"}