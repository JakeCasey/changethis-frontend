{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nimport { Query, Mutation } from 'react-apollo';\nimport Error from '../components/ErrorMessage';\nimport gql from 'graphql-tag';\nimport Table from './styles/Table';\nimport SickButton from './styles/SickButton';\nconst possiblePermissions = ['ADMIN', 'USER', 'PERMISSIONUPDATE'];\nconst UPDATE_PERMISSIONS_MUTATION = gql`\n  mutation updatePermissions($permissions: [Permission], $userId: ID!) {\n    updatePermissions(permissions: $permissions, userId: $userId) {\n      id\n      permissions\n      name\n      email\n    }\n  }\n`;\nconst ALL_USERS_QUERY = gql`\n  query {\n    users {\n      id\n      name\n      email\n      permissions\n    }\n  }\n`;\n\nconst Permissions = props => React.createElement(Query, {\n  query: ALL_USERS_QUERY\n}, ({\n  data,\n  loading,\n  error\n}) => {\n  if (loading) return 'Loading...';\n  if (error) return React.createElement(Error, {\n    error: error\n  });\n  return React.createElement(\"div\", null, React.createElement(\"div\", null, React.createElement(\"h2\", null, \"Manage Permissions\"), React.createElement(Table, null, React.createElement(\"thead\", null, React.createElement(\"tr\", null, React.createElement(\"th\", null, \"Name\"), React.createElement(\"th\", null, \"Email\"), possiblePermissions.map(permission => React.createElement(\"th\", {\n    key: permission\n  }, permission)), React.createElement(\"th\", null, \"\\uD83D\\uDC47\"))), React.createElement(\"tbody\", null, data.users.map(user => React.createElement(UserPermissions, {\n    key: user.id,\n    user: user\n  }))))));\n});\n\nclass UserPermissions extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      permissions: this.props.user.permissions\n    });\n\n    _defineProperty(this, \"handlePermissionChange\", (e, updatePermissions) => {\n      const checkbox = e.target; //take a copy of the current permissions\n\n      let updatedPermissions = [...this.state.permissions]; //figure out if we need to remove or add this permission\n\n      if (checkbox.checked) {\n        updatedPermissions.push(checkbox.value);\n      } else {\n        updatedPermissions = updatedPermissions.filter(permission => permission !== checkbox.value);\n      } //be aware that setState is async, you can use a callback function ala node.\n\n\n      this.setState({\n        permissions: updatedPermissions\n      }, updatePermissions);\n    });\n  }\n\n  render() {\n    const user = this.props.user;\n    return React.createElement(Mutation, {\n      mutation: UPDATE_PERMISSIONS_MUTATION,\n      variables: {\n        permissions: this.state.permissions,\n        userId: user.id\n      }\n    }, (updatePermissions, {\n      loading,\n      error\n    }) => React.createElement(React.Fragment, null, error && React.createElement(\"tr\", null, React.createElement(\"td\", {\n      colspan: \"8\"\n    }, React.createElement(Error, {\n      error: error\n    }))), React.createElement(\"tr\", null, React.createElement(\"td\", null, user.name), React.createElement(\"td\", null, user.email), possiblePermissions.map(p => React.createElement(\"td\", {\n      key: p\n    }, React.createElement(\"label\", {\n      htmlFor: `${user.id}-permission-${p}`\n    }, React.createElement(\"input\", {\n      id: `${user.id}-permission-${p}`,\n      type: \"checkbox\",\n      checked: this.state.permissions.includes(p),\n      value: p,\n      onChange: e => {\n        this.handlePermissionChange(e, updatePermissions);\n      }\n    })))), React.createElement(\"td\", null, React.createElement(SickButton, {\n      type: \"button\",\n      disabled: loading,\n      onClick: updatePermissions\n    }, ' ', \"Updat\", loading ? 'ing' : 'e')))));\n  }\n\n}\n\nexport default Permissions;","map":null,"metadata":{},"sourceType":"module"}