{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jakecasey/Documents/Projects/Bugs/skeleton-key-frontend/components/special/Toolbar.js\";\nimport React, { Component } from 'react';\nimport SickButton from '../styles/SickButton';\nimport styled from 'styled-components';\nimport withContainers from '../wrappers/withContainer';\nimport Global from './Global';\nimport ToolbarOverlay from './ToolbarOverlay';\nimport BlockList from './BlockList';\nimport btoa from 'btoa';\nimport Clipboard from 'react-clipboard.js'; // Blocks\n\nimport SimpleTextBlock from './SimpleTextBlock';\nimport PinBlock from './PinBlock';\nvar ToolbarDiv = styled.div.withConfig({\n  displayName: \"Toolbar__ToolbarDiv\",\n  componentId: \"sc-19q79xv-0\"\n})([\"width:100%;max-width:300px;z-index:10;background-color:#d2ddec;padding:40px;position:relative;p{margin:0px;}\"]);\n\nvar Toolbar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Toolbar, _Component);\n\n  function Toolbar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Toolbar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Toolbar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      base64: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showBlocks\", function () {\n      //place component in state\n      _this.props.Global.putComponentInToolbar(React.createElement(BlockList, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      })); //open toolbar\n\n\n      _this.props.Global.toggleToolbarOverlay();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showCanvasOptions\", function () {});\n\n    _defineProperty(_assertThisInitialized(_this), \"handlebase64Update\", function (e) {\n      _this.setState({\n        base64: e.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_updateState\", function () {\n      _this.props.Global._loadStateFromHash(_this.state.base64);\n    });\n\n    return _this;\n  }\n\n  _createClass(Toolbar, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var canvas = this.props.Global;\n      var toolbar = this.props.Global.state.toolbar;\n      return React.createElement(ToolbarDiv, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, this.props.Global && this.props.Global.state.toolbar.map(function (block, i) {\n        var type = block.type;\n\n        switch (type) {\n          case 'text':\n            return React.createElement(SimpleTextBlock, {\n              key: i,\n              block: block,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 65\n              },\n              __self: this\n            });\n            break;\n\n          case 'pin':\n            return React.createElement(PinBlock, {\n              key: i,\n              block: block,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 68\n              },\n              __self: this\n            });\n            break;\n        }\n      }), React.createElement(SickButton, {\n        onClick: function onClick() {\n          return _this2.showBlocks();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Add Block\"), React.createElement(\"p\", {\n        ref: function ref(textarea) {\n          return _this2.textArea = textarea;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }), this.props.Global && React.createElement(Clipboard, {\n        component: SickButton,\n        \"data-clipboard-text\": btoa(_JSON$stringify(this.props.Global.state)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"copy to clipboard\"), React.createElement(\"textarea\", {\n        onChange: function onChange(e) {\n          return _this2.handlebase64Update(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(SickButton, {\n        onClick: function onClick() {\n          return _this2._updateState();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, ' ', \"Update State From String\"), React.createElement(ToolbarOverlay, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Toolbar;\n}(Component);\n\nexport default withContainers([Global])(Toolbar);","map":{"version":3,"sources":["/Users/jakecasey/Documents/Projects/Bugs/skeleton-key-frontend/components/special/Toolbar.js"],"names":["React","Component","SickButton","styled","withContainers","Global","ToolbarOverlay","BlockList","btoa","Clipboard","SimpleTextBlock","PinBlock","ToolbarDiv","div","Toolbar","base64","props","putComponentInToolbar","toggleToolbarOverlay","e","setState","target","value","_loadStateFromHash","state","canvas","toolbar","map","block","i","type","showBlocks","textarea","textArea","handlebase64Update","_updateState"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SickButton from '../styles/SickButton';\nimport styled from 'styled-components';\nimport withContainers from '../wrappers/withContainer';\nimport Global from './Global';\nimport ToolbarOverlay from './ToolbarOverlay';\nimport BlockList from './BlockList';\nimport btoa from 'btoa';\nimport Clipboard from 'react-clipboard.js';\n\n// Blocks\nimport SimpleTextBlock from './SimpleTextBlock';\nimport PinBlock from './PinBlock';\n\nconst ToolbarDiv = styled.div`\n  width: 100%;\n  max-width: 300px;\n  z-index: 10;\n  background-color: #d2ddec;\n  padding: 40px;\n  position: relative;\n\n  p {\n    margin: 0px;\n  }\n`;\n\nclass Toolbar extends Component {\n  // state = {\n  //   base64: btoa(JSON.stringify(this.props.Global.state)),\n  // };\n\n  state = {\n    base64: '',\n  };\n\n  showBlocks = () => {\n    //place component in state\n    this.props.Global.putComponentInToolbar(<BlockList />);\n\n    //open toolbar\n    this.props.Global.toggleToolbarOverlay();\n  };\n\n  showCanvasOptions = () => {};\n\n  handlebase64Update = e => {\n    this.setState({ base64: e.target.value });\n  };\n\n  _updateState = () => {\n    this.props.Global._loadStateFromHash(this.state.base64);\n  };\n\n  render() {\n    var canvas = this.props.Global;\n    var toolbar = this.props.Global.state.toolbar;\n    return (\n      <ToolbarDiv>\n        {this.props.Global &&\n          this.props.Global.state.toolbar.map((block, i) => {\n            var type = block.type;\n            switch (type) {\n              case 'text':\n                return <SimpleTextBlock key={i} block={block} />;\n                break;\n              case 'pin':\n                return <PinBlock key={i} block={block} />;\n                break;\n            }\n          })}\n\n        <SickButton onClick={() => this.showBlocks()}>Add Block</SickButton>\n        <p ref={textarea => (this.textArea = textarea)}>{}</p>\n        {this.props.Global && (\n          <Clipboard\n            component={SickButton}\n            data-clipboard-text={btoa(JSON.stringify(this.props.Global.state))}\n          >\n            copy to clipboard\n          </Clipboard>\n        )}\n\n        <textarea onChange={e => this.handlebase64Update(e)} />\n\n        <SickButton onClick={() => this._updateState()}>\n          {' '}\n          Update State From String\n        </SickButton>\n\n        <ToolbarOverlay />\n\n        {/* <ToolbarOverlay>\n          <SickButton\n            onClick={() => {\n              canvas.addPath();\n            }}\n          >\n            Add Rectangle\n          </SickButton>\n          <SickButton\n            onClick={() => {\n              canvas.clear();\n            }}\n          >\n            Clear\n          </SickButton>\n          <SickButton\n            onClick={() => {\n              canvas.addArrow();\n            }}\n          >\n            Add Arrow\n          </SickButton>\n        </ToolbarOverlay> */}\n      </ToolbarDiv>\n    );\n  }\n}\n\nexport default withContainers([Global])(Toolbar);\n"]},"metadata":{},"sourceType":"module"}