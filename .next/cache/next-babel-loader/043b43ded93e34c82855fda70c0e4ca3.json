{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport withContainers from '../wrappers/withContainer';\nimport { Global as globalState } from './Global';\nimport React, { Component } from 'react';\nimport { Subscribe } from 'unstated';\nimport { getIframeScrollPosition } from '../../lib/helpers';\nimport styled from 'styled-components';\nimport SickButton from '../styles/SickButton';\nimport Pin from './Pin';\nconst ShowPinsDiv = styled.div.withConfig({\n  displayName: \"ShowPins__ShowPinsDiv\",\n  componentId: \"sc-1acb6tt-0\"\n})([\"position:absolute;top:\", \";left:0px;right:0px;bottom:0px;z-index:2;pointer-events:none;\"], props => props.scrollTop ? props.scrollTop : '0px');\nvar timeout = '';\n\nclass ShowPins extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      scrollTop: 0\n    });\n\n    _defineProperty(this, \"_updateScrollPosition\", event => {\n      var scroll = '';\n      var iframeScrollPosition = document.getElementById('iframe').contentWindow.document.getElementById('iframeScrollPosition');\n\n      if (iframeScrollPosition.getAttribute('y')) {\n        scroll = -iframeScrollPosition.getAttribute('y');\n      } else {\n        scroll = 0;\n      }\n\n      this.setState({\n        scrollTop: scroll + 'px'\n      });\n    });\n\n    _defineProperty(this, \"_handleScroll\", () => {\n      window.clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        this._updateScrollPosition();\n\n        setTimeout(this._updateScrollPosition(), 150);\n      }, 150);\n\n      this._updateScrollPosition();\n    });\n  }\n\n  componentDidMount() {\n    //get initial scroll pos\n    this._updateScrollPosition(); //attach scroll listener\n\n\n    var iframeScrollPosition = document.getElementById('iframe').contentWindow.document.addEventListener('scroll', this._handleScroll, false);\n  } //polling is almost accurate but needs a trail off perhaps an interval or a while statement\n  //that runs several more times over a few seconds.\n\n\n  componentWillUnmount() {// window.removeEventListener('scroll', this._updateScrollPosition, false);\n  }\n\n  render() {\n    var block = this.props.block;\n    return React.createElement(\"div\", null, React.createElement(Subscribe, {\n      to: [Global]\n    }, Global => React.createElement(ShowPinsDiv, {\n      scrollTop: this.state.scrollTop\n    }, Global.state.pins.map((pin, i) => {\n      return React.createElement(Pin, {\n        key: i,\n        pin: pin,\n        global: Global\n      });\n    }))));\n  }\n\n} // export default withContainers([globalState])(ShowPins);\n\n\nexport default ShowPins;","map":null,"metadata":{},"sourceType":"module"}