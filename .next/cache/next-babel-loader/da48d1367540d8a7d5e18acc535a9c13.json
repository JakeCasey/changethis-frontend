{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Fragment } from 'react';\nimport { Container, Subscribe } from 'unstated';\nimport PinOverlay from './PinOverlay';\nimport ShowPins from './ShowPins';\nimport shortId from 'shortid';\nimport _ from 'lodash';\n\nclass Global extends Container {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      overIframe: [],\n      currentIframe: 'https://changethisfrontend.deva.io/api/proxy?url=aHR0cDovL3d3dy5nb29nbGUuY29t',\n      showPins: false,\n      showCanvas: false,\n      canvas: null,\n      iframe: {\n        size: {\n          height: 0,\n          width: 200\n        }\n      },\n      showToolbarOverlay: false,\n      toolbarOverlayContents: '',\n      toolbar: [],\n      isPlacingPin: false,\n      pins: [],\n      text: 'This is some text'\n    });\n\n    _defineProperty(this, \"addSimpleTextBlock\", () => {\n      this.toggleToolbarOverlay();\n      var simpleText = {\n        id: shortId.generate(),\n        type: 'text',\n        value: 'test',\n        label: 'test'\n      };\n      var toolbar = this.state.toolbar;\n      toolbar.push(simpleText);\n      this.setState({\n        toolbar\n      });\n    });\n\n    _defineProperty(this, \"addPinBlock\", () => {\n      this.toggleToolbarOverlay();\n      this.setState({\n        overIframe: [...this.state.overIframe, {\n          belongsTo: 'test',\n          component: ShowPins\n        }]\n      });\n      var pin = {\n        id: shortId.generate(),\n        type: 'pin'\n      }; //place pin view over iframe\n\n      var toolbar = this.state.toolbar;\n      toolbar.push(pin);\n      this.setState({\n        toolbar\n      });\n    });\n\n    _defineProperty(this, \"putComponentInToolbar\", component => {\n      this.setState({\n        toolbarOverlayContents: component\n      });\n    });\n\n    _defineProperty(this, \"toggleToolbarOverlay\", () => {\n      this.setState({\n        showToolbarOverlay: !this.state.showToolbarOverlay\n      });\n    });\n\n    _defineProperty(this, \"togglePinPlacement\", (id, block) => {\n      if (this.state.isPlacingPin) {\n        var stat = this.state.overIframe;\n        stat = _.filter(stat, function (i) {\n          return i.belongsTo != id;\n        });\n        this.setState({\n          overIframe: stat,\n          isPlacingPin: false\n        });\n      } else {\n        this.setState({\n          overIframe: [...this.state.overIframe, {\n            belongsTo: id,\n            component: PinOverlay\n          }],\n          isPlacingPin: true\n        });\n      }\n    });\n\n    _defineProperty(this, \"addPath\", () => {\n      var canvas = this.state.canvas;\n      var path = new fabric.Path('M 0 0 L 200 100 L 170 200 z');\n      path.set({\n        left: 120,\n        top: 120\n      });\n      canvas.add(path);\n      this.setState({\n        canvas\n      });\n    });\n\n    _defineProperty(this, \"addArrow\", () => {\n      var canvas = this.state.canvas;\n      fabric.loadSVGFromURL('/static/images/arrow.svg', function (objects, options) {\n        var obj = fabric.util.groupSVGElements(objects, options);\n        canvas.add(obj).renderAll();\n      });\n      this.setState({\n        canvas\n      });\n    });\n\n    _defineProperty(this, \"showCanvas\", () => {\n      this.setState({\n        showCanvas: true\n      });\n    });\n\n    _defineProperty(this, \"hideCanvas\", () => {\n      this.setState({\n        showCanvas: false\n      });\n    });\n\n    _defineProperty(this, \"instantiateCanvas\", that => {\n      const canvas = new fabric.Canvas(that.c);\n      this.setState({\n        canvas\n      });\n    });\n\n    _defineProperty(this, \"clear\", () => {\n      var canvas = this.state.canvas;\n      var canvas = canvas.clear();\n      this.setState({\n        canvas\n      });\n    });\n\n    _defineProperty(this, \"_placePin\", pin => {\n      pin.id = shortId.generate();\n      var pins = this.state.pins;\n      pins.push(pin);\n      this.setState({\n        pins\n      });\n    });\n\n    _defineProperty(this, \"_updatePinCommentByID\", (id, text, previousState) => {\n      var that = previousState;\n      _.find(that, {\n        id: id\n      }).comment = text;\n      this.setState({\n        pins: that\n      });\n    });\n\n    _defineProperty(this, \"_loadStateFromHash\", hash => {\n      var test = atob(hash);\n      var previousState = this.state;\n      test = JSON.parse(test);\n\n      if (test.pins.length > 0) {\n        previousState.overIframe = [...this.state.overIframe, {\n          belongsTo: 'test',\n          component: ShowPins\n        }];\n      }\n\n      previousState.pins = test.pins;\n      previousState.toolbar = test.toolbar;\n      this.setState(_objectSpread({}, previousState));\n    });\n\n    _defineProperty(this, \"setCurrentIframe\", url => {\n      this.setState({\n        currentIframe: url\n      });\n    });\n  }\n\n}\n\nexport { Global };","map":{"version":3,"sources":["/Users/jakecasey/Documents/Projects/Bugs/skeleton-key-frontend/components/special/Global.js"],"names":["React","Fragment","Container","Subscribe","PinOverlay","ShowPins","shortId","_","Global","overIframe","currentIframe","showPins","showCanvas","canvas","iframe","size","height","width","showToolbarOverlay","toolbarOverlayContents","toolbar","isPlacingPin","pins","text","toggleToolbarOverlay","simpleText","id","generate","type","value","label","state","push","setState","belongsTo","component","pin","block","stat","filter","i","path","fabric","Path","set","left","top","add","loadSVGFromURL","objects","options","obj","util","groupSVGElements","renderAll","that","Canvas","c","clear","previousState","find","comment","hash","test","atob","JSON","parse","length","url"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { Container, Subscribe } from 'unstated';\nimport PinOverlay from './PinOverlay';\nimport ShowPins from './ShowPins';\nimport shortId from 'shortid';\nimport _ from 'lodash';\n\nclass Global extends Container {\n  state = {\n    overIframe: [],\n    currentIframe:\n      'https://changethisfrontend.deva.io/api/proxy?url=aHR0cDovL3d3dy5nb29nbGUuY29t',\n    showPins: false,\n    showCanvas: false,\n    canvas: null,\n    iframe: {\n      size: { height: 0, width: 200 },\n    },\n    showToolbarOverlay: false,\n    toolbarOverlayContents: '',\n    toolbar: [],\n    isPlacingPin: false,\n    pins: [],\n    text: 'This is some text',\n  };\n\n  addSimpleTextBlock = () => {\n    this.toggleToolbarOverlay();\n\n    var simpleText = {\n      id: shortId.generate(),\n      type: 'text',\n      value: 'test',\n      label: 'test',\n    };\n\n    var toolbar = this.state.toolbar;\n\n    toolbar.push(simpleText);\n\n    this.setState({ toolbar });\n  };\n\n  addPinBlock = () => {\n    this.toggleToolbarOverlay();\n\n    this.setState({\n      overIframe: [\n        ...this.state.overIframe,\n        { belongsTo: 'test', component: ShowPins },\n      ],\n    });\n\n    var pin = {\n      id: shortId.generate(),\n      type: 'pin',\n    };\n\n    //place pin view over iframe\n\n    var toolbar = this.state.toolbar;\n\n    toolbar.push(pin);\n\n    this.setState({ toolbar });\n  };\n\n  putComponentInToolbar = component => {\n    this.setState({ toolbarOverlayContents: component });\n  };\n\n  toggleToolbarOverlay = () => {\n    this.setState({ showToolbarOverlay: !this.state.showToolbarOverlay });\n  };\n\n  togglePinPlacement = (id, block) => {\n    if (this.state.isPlacingPin) {\n      var stat = this.state.overIframe;\n\n      stat = _.filter(stat, function(i) {\n        return i.belongsTo != id;\n      });\n\n      this.setState({\n        overIframe: stat,\n        isPlacingPin: false,\n      });\n    } else {\n      this.setState({\n        overIframe: [\n          ...this.state.overIframe,\n          { belongsTo: id, component: PinOverlay },\n        ],\n        isPlacingPin: true,\n      });\n    }\n  };\n\n  addPath = () => {\n    var canvas = this.state.canvas;\n    var path = new fabric.Path('M 0 0 L 200 100 L 170 200 z');\n    path.set({ left: 120, top: 120 });\n    canvas.add(path);\n    this.setState({ canvas });\n  };\n\n  addArrow = () => {\n    var canvas = this.state.canvas;\n    fabric.loadSVGFromURL('/static/images/arrow.svg', function(\n      objects,\n      options,\n    ) {\n      var obj = fabric.util.groupSVGElements(objects, options);\n      canvas.add(obj).renderAll();\n    });\n    this.setState({ canvas });\n  };\n\n  showCanvas = () => {\n    this.setState({ showCanvas: true });\n  };\n\n  hideCanvas = () => {\n    this.setState({ showCanvas: false });\n  };\n\n  instantiateCanvas = that => {\n    const canvas = new fabric.Canvas(that.c);\n    this.setState({ canvas });\n  };\n\n  clear = () => {\n    var canvas = this.state.canvas;\n    var canvas = canvas.clear();\n    this.setState({ canvas });\n  };\n\n  _placePin = pin => {\n    pin.id = shortId.generate();\n    var pins = this.state.pins;\n    pins.push(pin);\n    this.setState({ pins });\n  };\n\n  _updatePinCommentByID = (id, text, previousState) => {\n    var that = previousState;\n    _.find(that, { id: id }).comment = text;\n    this.setState({ pins: that });\n  };\n\n  _loadStateFromHash = hash => {\n    var test = atob(hash);\n    var previousState = this.state;\n    test = JSON.parse(test);\n    if (test.pins.length > 0) {\n      previousState.overIframe = [\n        ...this.state.overIframe,\n        { belongsTo: 'test', component: ShowPins },\n      ];\n    }\n    previousState.pins = test.pins;\n    previousState.toolbar = test.toolbar;\n    this.setState({ ...previousState });\n  };\n\n  setCurrentIframe = url => {\n    this.setState({ currentIframe: url });\n  };\n}\n\nexport { Global };\n"]},"metadata":{},"sourceType":"module"}