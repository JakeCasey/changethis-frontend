{"ast":null,"code":"import { prodEndPoint, endpoint } from '../../config';\nimport fetch from 'isomorphic-fetch'; //fucky stuff going on here\n\nexport default (async (req, res) => {\n  try {\n    var newEndpoint = process.env.NODE_ENV === 'development' ? endpoint : prodEndPoint;\n    var url = req.url;\n    var fetchUrl = newEndpoint + url;\n    var fetchRes = await fetch(fetchUrl); // console.log(fetchRes);\n\n    const contentType = fetchRes.headers.get('content-type');\n    let response; // if (contentType.includes('text/html')) {\n    //   response = await fetchRes.text();\n    //   res.setHeader('Content-Type', 'text/html');\n    // }\n    // if (contentType.includes('text/css')) {\n    //   response = await fetchRes.text();\n    //   res.setHeader('Content-Type', 'text/css');\n    // }\n    // if (contentType.includes('image/png')) {\n    //   response = fetchRes.text();\n    //   res.setHeader('Content-Type', 'image/png');\n    // }\n\n    response = await fetchRes.text();\n    res.setHeader('Content-Type', contentType);\n\n    if (contentType.includes('image/jpeg')) {\n      response = await fetchRes;\n      res.setHeader('Content-Type', 'image/jpeg');\n    }\n\n    if (contentType.includes('image/png')) {\n      response = await fetchRes;\n      res.setHeader('Content-Type', 'image/png');\n    }\n\n    console.log(fetchRes);\n    res.send(response);\n  } catch (error) {// if (error) throw new Error(error);\n  }\n});","map":{"version":3,"sources":["/Users/jakecasey/Documents/Projects/Bugs/skeleton-key-frontend/pages/api/proxy.js"],"names":["prodEndPoint","endpoint","fetch","req","res","newEndpoint","process","env","NODE_ENV","url","fetchUrl","fetchRes","contentType","headers","get","response","text","setHeader","includes","console","log","send","error"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,QAAvB,QAAuC,cAAvC;AACA,OAAOC,KAAP,MAAkB,kBAAlB,C,CAEA;;AACA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAI;AACF,QAAIC,WAAW,GACbC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GAAyCP,QAAzC,GAAoDD,YADtD;AAEA,QAAIS,GAAG,GAAGN,GAAG,CAACM,GAAd;AACA,QAAIC,QAAQ,GAAGL,WAAW,GAAGI,GAA7B;AAEA,QAAIE,QAAQ,GAAG,MAAMT,KAAK,CAACQ,QAAD,CAA1B,CANE,CAOF;;AACA,UAAME,WAAW,GAAGD,QAAQ,CAACE,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,CAApB;AAEA,QAAIC,QAAJ,CAVE,CAWF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,IAAAA,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAjB;AACAZ,IAAAA,GAAG,CAACa,SAAJ,CAAc,cAAd,EAA8BL,WAA9B;;AAEA,QAAIA,WAAW,CAACM,QAAZ,CAAqB,YAArB,CAAJ,EAAwC;AACtCH,MAAAA,QAAQ,GAAG,MAAMJ,QAAjB;AACAP,MAAAA,GAAG,CAACa,SAAJ,CAAc,cAAd,EAA8B,YAA9B;AACD;;AAED,QAAIL,WAAW,CAACM,QAAZ,CAAqB,WAArB,CAAJ,EAAuC;AACrCH,MAAAA,QAAQ,GAAG,MAAMJ,QAAjB;AACAP,MAAAA,GAAG,CAACa,SAAJ,CAAc,cAAd,EAA8B,WAA9B;AACD;;AAEDE,IAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACAP,IAAAA,GAAG,CAACiB,IAAJ,CAASN,QAAT;AACD,GAvCD,CAuCE,OAAOO,KAAP,EAAc,CACd;AACD;AACF,CA3CD","sourcesContent":["import { prodEndPoint, endpoint } from '../../config';\nimport fetch from 'isomorphic-fetch';\n\n//fucky stuff going on here\nexport default async (req, res) => {\n  try {\n    var newEndpoint =\n      process.env.NODE_ENV === 'development' ? endpoint : prodEndPoint;\n    var url = req.url;\n    var fetchUrl = newEndpoint + url;\n\n    var fetchRes = await fetch(fetchUrl);\n    // console.log(fetchRes);\n    const contentType = fetchRes.headers.get('content-type');\n\n    let response;\n    // if (contentType.includes('text/html')) {\n    //   response = await fetchRes.text();\n    //   res.setHeader('Content-Type', 'text/html');\n    // }\n    // if (contentType.includes('text/css')) {\n    //   response = await fetchRes.text();\n    //   res.setHeader('Content-Type', 'text/css');\n    // }\n    // if (contentType.includes('image/png')) {\n    //   response = fetchRes.text();\n    //   res.setHeader('Content-Type', 'image/png');\n    // }\n\n    response = await fetchRes.text();\n    res.setHeader('Content-Type', contentType);\n\n    if (contentType.includes('image/jpeg')) {\n      response = await fetchRes;\n      res.setHeader('Content-Type', 'image/jpeg');\n    }\n\n    if (contentType.includes('image/png')) {\n      response = await fetchRes;\n      res.setHeader('Content-Type', 'image/png');\n    }\n\n    console.log(fetchRes);\n    res.send(response);\n  } catch (error) {\n    // if (error) throw new Error(error);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}