{"ast":null,"code":"import { prodEndPoint, endpoint } from '../../config'; // import fetch from 'isomorphic-fetch';\n//fucky stuff going on here\n\nexport default (async (req, res) => {\n  try {\n    var newEndpoint = process.env.NODE_ENV === 'production' ? prodEndPoint : endpoint;\n    console.log(newEndpoint);\n    var url = req.url;\n    var fetchUrl = newEndpoint + url;\n    var fetchRes = await fetch(fetchUrl); // console.log(fetchRes);\n\n    const contentType = fetchRes.headers.get('content-type');\n    let response; // if (contentType.includes('text/html')) {\n    //   response = await fetchRes.text();\n    //   res.setHeader('Content-Type', 'text/html');\n    // }\n    // if (contentType.includes('text/css')) {\n    //   response = await fetchRes.text();\n    //   res.setHeader('Content-Type', 'text/css');\n    // }\n    // if (contentType.includes('image/png')) {\n    //   response = fetchRes.text();\n    //   res.setHeader('Content-Type', 'image/png');\n    // }\n\n    res.setHeader('Content-Type', contentType); // TODO: these are not serving the correct data formats;\n\n    console.log(contentType);\n\n    if (contentType.includes('image/jpeg')) {\n      console.log('jpeg');\n\n      try {\n        response = await fetchRes.buffer();\n      } catch (error) {\n        if (error) console.log(error);\n      }\n\n      res.end(response, 'binary');\n      return;\n    }\n\n    if (contentType.includes('image/png')) {\n      console.log('png');\n\n      try {\n        response = await fetchRes.buffer();\n      } catch (error) {\n        if (error) console.log(error);\n      }\n\n      res.end(response, 'binary');\n      return;\n    }\n\n    response = await fetchRes.text();\n    res.send(response);\n  } catch (error) {// if (error) throw new Error(error);\n  }\n});","map":{"version":3,"sources":["/Users/jakecasey/Documents/Projects/Bugs/skeleton-key-frontend/pages/api/proxy.js"],"names":["prodEndPoint","endpoint","req","res","newEndpoint","process","env","NODE_ENV","console","log","url","fetchUrl","fetchRes","fetch","contentType","headers","get","response","setHeader","includes","buffer","error","end","text","send"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,QAAvB,QAAuC,cAAvC,C,CACA;AAEA;;AACA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAI;AACF,QAAIC,WAAW,GACbC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCP,YAAxC,GAAuDC,QADzD;AAEAO,IAAAA,OAAO,CAACC,GAAR,CAAYL,WAAZ;AACA,QAAIM,GAAG,GAAGR,GAAG,CAACQ,GAAd;AACA,QAAIC,QAAQ,GAAGP,WAAW,GAAGM,GAA7B;AAEA,QAAIE,QAAQ,GAAG,MAAMC,KAAK,CAACF,QAAD,CAA1B,CAPE,CAQF;;AACA,UAAMG,WAAW,GAAGF,QAAQ,CAACG,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,CAApB;AAEA,QAAIC,QAAJ,CAXE,CAYF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAd,IAAAA,GAAG,CAACe,SAAJ,CAAc,cAAd,EAA8BJ,WAA9B,EAzBE,CA2BF;;AAEAN,IAAAA,OAAO,CAACC,GAAR,CAAYK,WAAZ;;AAEA,QAAIA,WAAW,CAACK,QAAZ,CAAqB,YAArB,CAAJ,EAAwC;AACtCX,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;;AACA,UAAI;AACFQ,QAAAA,QAAQ,GAAG,MAAML,QAAQ,CAACQ,MAAT,EAAjB;AACD,OAFD,CAEE,OAAOC,KAAP,EAAc;AACd,YAAIA,KAAJ,EAAWb,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACZ;;AACDlB,MAAAA,GAAG,CAACmB,GAAJ,CAAQL,QAAR,EAAkB,QAAlB;AACA;AACD;;AAED,QAAIH,WAAW,CAACK,QAAZ,CAAqB,WAArB,CAAJ,EAAuC;AACrCX,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;;AACA,UAAI;AACFQ,QAAAA,QAAQ,GAAG,MAAML,QAAQ,CAACQ,MAAT,EAAjB;AACD,OAFD,CAEE,OAAOC,KAAP,EAAc;AACd,YAAIA,KAAJ,EAAWb,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACZ;;AACDlB,MAAAA,GAAG,CAACmB,GAAJ,CAAQL,QAAR,EAAkB,QAAlB;AACA;AACD;;AAEDA,IAAAA,QAAQ,GAAG,MAAML,QAAQ,CAACW,IAAT,EAAjB;AACApB,IAAAA,GAAG,CAACqB,IAAJ,CAASP,QAAT;AACD,GAvDD,CAuDE,OAAOI,KAAP,EAAc,CACd;AACD;AACF,CA3DD","sourcesContent":["import { prodEndPoint, endpoint } from '../../config';\n// import fetch from 'isomorphic-fetch';\n\n//fucky stuff going on here\nexport default async (req, res) => {\n  try {\n    var newEndpoint =\n      process.env.NODE_ENV === 'production' ? prodEndPoint : endpoint;\n    console.log(newEndpoint);\n    var url = req.url;\n    var fetchUrl = newEndpoint + url;\n\n    var fetchRes = await fetch(fetchUrl);\n    // console.log(fetchRes);\n    const contentType = fetchRes.headers.get('content-type');\n\n    let response;\n    // if (contentType.includes('text/html')) {\n    //   response = await fetchRes.text();\n    //   res.setHeader('Content-Type', 'text/html');\n    // }\n    // if (contentType.includes('text/css')) {\n    //   response = await fetchRes.text();\n    //   res.setHeader('Content-Type', 'text/css');\n    // }\n    // if (contentType.includes('image/png')) {\n    //   response = fetchRes.text();\n    //   res.setHeader('Content-Type', 'image/png');\n    // }\n\n    res.setHeader('Content-Type', contentType);\n\n    // TODO: these are not serving the correct data formats;\n\n    console.log(contentType);\n\n    if (contentType.includes('image/jpeg')) {\n      console.log('jpeg');\n      try {\n        response = await fetchRes.buffer();\n      } catch (error) {\n        if (error) console.log(error);\n      }\n      res.end(response, 'binary');\n      return;\n    }\n\n    if (contentType.includes('image/png')) {\n      console.log('png');\n      try {\n        response = await fetchRes.buffer();\n      } catch (error) {\n        if (error) console.log(error);\n      }\n      res.end(response, 'binary');\n      return;\n    }\n\n    response = await fetchRes.text();\n    res.send(response);\n  } catch (error) {\n    // if (error) throw new Error(error);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}