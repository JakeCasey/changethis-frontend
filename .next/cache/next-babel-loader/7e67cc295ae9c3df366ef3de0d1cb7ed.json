{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport withContainers from '../wrappers/withContainer';\nimport { Global as globalState } from './Global';\nimport React, { Component } from 'react';\nimport SickButton from '../styles/SickButton';\n\nvar PinBlock =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PinBlock, _Component);\n\n  function PinBlock() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PinBlock);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PinBlock)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {});\n\n    return _this;\n  }\n\n  _createClass(PinBlock, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var block = this.props.block;\n      return React.createElement(React.Fragment, null, this.props.globalState && this.props.globalState.state.pins.map(function (p, index) {\n        if (p.belongsTo == _this2.props.block.id) {\n          return React.createElement(\"p\", {\n            key: index\n          }, p.comment);\n        }\n      }), React.createElement(SickButton, {\n        onClick: function onClick() {\n          return _this2.props.globalState.togglePinPlacement(_this2.props.block.id);\n        }\n      }, this.props.globalState && this.props.globalState.state.isPlacingPin ? 'Stop Placing Pins' : 'Place Pin'));\n    }\n  }]);\n\n  return PinBlock;\n}(Component);\n\nexport default withContainers([globalState])(PinBlock);","map":null,"metadata":{},"sourceType":"module"}