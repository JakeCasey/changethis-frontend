{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jakecasey/Documents/Projects/Bugs/skeleton-key-frontend/components/special/Comment.js\";\nimport React, { Component } from \"react\";\nimport { Global as globalState } from \"./Global\";\nimport { Subscribe } from \"unstated\";\nimport _ from \"lodash\";\nimport styled from \"styled-components\";\nimport { Provider } from \"unstated\";\nconst Commentarea = styled.textarea.withConfig({\n  displayName: \"Comment__Commentarea\",\n  componentId: \"dimpc7-0\"\n})([\"width:100%;height:100%;\"]);\n\nclass Comment extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"_getPlaceholder\", () => {\n      var placeholders = [\"This needs more SPARKLE.\", \"Can I get this in comic-sans?\", \"I like everything about how this looks, except for how it looks.\", \"How can we “spice” this page up?\", \"Why don’t we add a few more colors into the mix?\", \"This shit is gonna go viral\", \"How about we just “spruce” this up a bit?\"];\n      return _.sample(placeholders);\n    });\n\n    _defineProperty(this, \"_updateComment\", (globalState, e) => {\n      var previousState = globalState.state.pins;\n\n      globalState._updatePinCommentByID(this.props.pin.id, e.target.value, previousState);\n    });\n  }\n\n  render() {\n    return React.createElement(Commentarea, {\n      className: \"bg-gray-100\",\n      value: this.props.pin.comment,\n      onChange: e => this._updateComment(this.props.globalState, e),\n      placeholder: this._getPlaceholder(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Comment;","map":{"version":3,"sources":["/Users/jakecasey/Documents/Projects/Bugs/skeleton-key-frontend/components/special/Comment.js"],"names":["React","Component","Global","globalState","Subscribe","_","styled","Provider","Commentarea","textarea","Comment","placeholders","sample","e","previousState","state","pins","_updatePinCommentByID","props","pin","id","target","value","render","comment","_updateComment","_getPlaceholder"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,MAAM,IAAIC,WAAnB,QAAsC,UAAtC;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,QAAT,QAAyB,UAAzB;AAEA,MAAMC,WAAW,GAAGF,MAAM,CAACG,QAAV;AAAA;AAAA;AAAA,+BAAjB;;AAKA,MAAMC,OAAN,SAAsBT,SAAtB,CAAgC;AAAA;AAAA;;AAAA,6CACZ,MAAM;AACtB,UAAIU,YAAY,GAAG,CACjB,0BADiB,EAEjB,+BAFiB,EAGjB,kEAHiB,EAIjB,kCAJiB,EAKjB,kDALiB,EAMjB,6BANiB,EAOjB,2CAPiB,CAAnB;AASA,aAAON,CAAC,CAACO,MAAF,CAASD,YAAT,CAAP;AACD,KAZ6B;;AAAA,4CAcb,CAACR,WAAD,EAAcU,CAAd,KAAoB;AACnC,UAAIC,aAAa,GAAGX,WAAW,CAACY,KAAZ,CAAkBC,IAAtC;;AAEAb,MAAAA,WAAW,CAACc,qBAAZ,CACE,KAAKC,KAAL,CAAWC,GAAX,CAAeC,EADjB,EAEEP,CAAC,CAACQ,MAAF,CAASC,KAFX,EAGER,aAHF;AAKD,KAtB6B;AAAA;;AAwB9BS,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,WAAD;AACE,MAAA,SAAS,EAAC,aADZ;AAEE,MAAA,KAAK,EAAE,KAAKL,KAAL,CAAWC,GAAX,CAAeK,OAFxB;AAGE,MAAA,QAAQ,EAAEX,CAAC,IAAI,KAAKY,cAAL,CAAoB,KAAKP,KAAL,CAAWf,WAA/B,EAA4CU,CAA5C,CAHjB;AAIE,MAAA,WAAW,EAAE,KAAKa,eAAL,EAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQD;;AAjC6B;;AAoChC,eAAehB,OAAf","sourcesContent":["import React, { Component } from \"react\";\n\nimport { Global as globalState } from \"./Global\";\nimport { Subscribe } from \"unstated\";\nimport _ from \"lodash\";\nimport styled from \"styled-components\";\nimport { Provider } from \"unstated\";\n\nconst Commentarea = styled.textarea`\n  width: 100%;\n  height: 100%;\n`;\n\nclass Comment extends Component {\n  _getPlaceholder = () => {\n    var placeholders = [\n      \"This needs more SPARKLE.\",\n      \"Can I get this in comic-sans?\",\n      \"I like everything about how this looks, except for how it looks.\",\n      \"How can we “spice” this page up?\",\n      \"Why don’t we add a few more colors into the mix?\",\n      \"This shit is gonna go viral\",\n      \"How about we just “spruce” this up a bit?\"\n    ];\n    return _.sample(placeholders);\n  };\n\n  _updateComment = (globalState, e) => {\n    var previousState = globalState.state.pins;\n\n    globalState._updatePinCommentByID(\n      this.props.pin.id,\n      e.target.value,\n      previousState\n    );\n  };\n\n  render() {\n    return (\n      <Commentarea\n        className=\"bg-gray-100\"\n        value={this.props.pin.comment}\n        onChange={e => this._updateComment(this.props.globalState, e)}\n        placeholder={this._getPlaceholder()}\n      />\n    );\n  }\n}\n\nexport default Comment;\n"]},"metadata":{},"sourceType":"module"}