{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jakecasey/Documents/Projects/Bugs/skeleton-key-frontend/components/special/ShowPins.js\";\nimport withContainers from \"../wrappers/withContainer\";\nimport { Global as globalState } from \"./Global\";\nimport React, { Component } from \"react\";\nimport { Subscribe } from \"unstated\";\nimport { getIframeScrollPosition } from \"../../lib/helpers\";\nimport styled from \"styled-components\";\nimport SickButton from \"../styles/SickButton\";\nimport Pin from \"./Pin\";\nvar ShowPinsDiv = styled.div.withConfig({\n  displayName: \"ShowPins__ShowPinsDiv\",\n  componentId: \"sc-1acb6tt-0\"\n})([\"position:absolute;top:\", \";left:0px;right:0px;bottom:0px;z-index:2;pointer-events:none;\"], function (props) {\n  return props.scrollTop ? props.scrollTop : \"0px\";\n});\nvar timeout = \"\";\n\nvar ShowPins =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ShowPins, _Component);\n\n  function ShowPins() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ShowPins);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ShowPins)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      scrollTop: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_updateScrollPosition\", function (event) {\n      var scroll = \"\";\n      var iframeScrollPosition = document.getElementById(\"iframe\").contentWindow.document.getElementById(\"iframeScrollPosition\");\n\n      if (iframeScrollPosition.getAttribute(\"y\")) {\n        scroll = -iframeScrollPosition.getAttribute(\"y\");\n      } else {\n        scroll = 0;\n      }\n\n      _this.setState({\n        scrollTop: scroll + \"px\"\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleScroll\", function (me) {\n      window.clearTimeout(timeout);\n      timeout = setTimeout(function () {\n        _this._updateScrollPosition();\n\n        setTimeout(_this._updateScrollPosition(), 150);\n      }, 150);\n\n      _this._updateScrollPosition();\n    });\n\n    return _this;\n  }\n\n  _createClass(ShowPins, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //get initial scroll pos\n      var observer = new MutationObserver(function (mutations) {\n        mutations.forEach(function (mutation) {\n          if (!mutation.addedNodes) return;\n\n          for (var i = 0; i < mutation.addedNodes.length; i++) {\n            // do things to your newly added nodes here\n            var node = mutation.addedNodes[i];\n            console.log(node);\n          }\n        });\n      });\n      console.log(\"Component Loaded\");\n      observer.observe(document.getElementById(\"iframe\").contentWindow.document.body, {\n        childList: true,\n        subtree: true,\n        attributes: false,\n        characterData: false\n      }); //TODO: THIS NEEDS TO WAIT FOR IFRAME TO EXIST\n      // setTimeout(() => {\n      //   this._updateScrollPosition();\n      //   //attach scroll listener\n      //   document\n      //     .getElementById(\"iframe\")\n      //     .contentWindow.document.addEventListener(\n      //       \"scroll\",\n      //       this._handleScroll,\n      //       false\n      //     );\n      // }, 2000);\n    } //polling is almost accurate but needs a trail off perhaps an interval or a while statement\n    //that runs several more times over a few seconds.\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {// window.removeEventListener('scroll', this._updateScrollPosition, false);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var block = this.props.block;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(Subscribe, {\n        to: [globalState],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, function (test) {\n        return React.createElement(ShowPinsDiv, {\n          scrollTop: _this2.state.scrollTop,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, test.state.pins.map(function (pin, i) {\n          return React.createElement(Pin, {\n            key: i,\n            pin: pin,\n            test: test,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 110\n            },\n            __self: this\n          });\n        }));\n      }));\n    }\n  }]);\n\n  return ShowPins;\n}(Component); // export default withContainers([globalState])(ShowPins);\n\n\nexport default ShowPins;","map":{"version":3,"sources":["/Users/jakecasey/Documents/Projects/Bugs/skeleton-key-frontend/components/special/ShowPins.js"],"names":["withContainers","Global","globalState","React","Component","Subscribe","getIframeScrollPosition","styled","SickButton","Pin","ShowPinsDiv","div","props","scrollTop","timeout","ShowPins","event","scroll","iframeScrollPosition","document","getElementById","contentWindow","getAttribute","setState","me","window","clearTimeout","setTimeout","_updateScrollPosition","observer","MutationObserver","mutations","forEach","mutation","addedNodes","i","length","node","console","log","observe","body","childList","subtree","attributes","characterData","block","test","state","pins","map","pin"],"mappings":"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","sourcesContent":["import withContainers from \"../wrappers/withContainer\";\n\nimport { Global as globalState } from \"./Global\";\nimport React, { Component } from \"react\";\nimport { Subscribe } from \"unstated\";\n\nimport { getIframeScrollPosition } from \"../../lib/helpers\";\n\nimport styled from \"styled-components\";\n\nimport SickButton from \"../styles/SickButton\";\nimport Pin from \"./Pin\";\n\nconst ShowPinsDiv = styled.div`\n  position: absolute;\n  top: ${props => (props.scrollTop ? props.scrollTop : \"0px\")};\n  left: 0px;\n  right: 0px;\n  bottom: 0px;\n  z-index: 2;\n  pointer-events: none;\n`;\n\nvar timeout = \"\";\n\nclass ShowPins extends Component {\n  state = {\n    scrollTop: 0\n  };\n\n  componentDidMount() {\n    //get initial scroll pos\n\n    var observer = new MutationObserver(function(mutations) {\n      mutations.forEach(function(mutation) {\n        if (!mutation.addedNodes) return;\n\n        for (var i = 0; i < mutation.addedNodes.length; i++) {\n          // do things to your newly added nodes here\n          var node = mutation.addedNodes[i];\n          console.log(node);\n        }\n      });\n    });\n\n    console.log(\"Component Loaded\");\n    observer.observe(\n      document.getElementById(\"iframe\").contentWindow.document.body,\n      {\n        childList: true,\n        subtree: true,\n        attributes: false,\n        characterData: false\n      }\n    );\n\n    //TODO: THIS NEEDS TO WAIT FOR IFRAME TO EXIST\n    // setTimeout(() => {\n    //   this._updateScrollPosition();\n\n    //   //attach scroll listener\n    //   document\n    //     .getElementById(\"iframe\")\n    //     .contentWindow.document.addEventListener(\n    //       \"scroll\",\n    //       this._handleScroll,\n    //       false\n    //     );\n    // }, 2000);\n  }\n\n  //polling is almost accurate but needs a trail off perhaps an interval or a while statement\n  //that runs several more times over a few seconds.\n\n  _updateScrollPosition = event => {\n    var scroll = \"\";\n    var iframeScrollPosition = document\n      .getElementById(\"iframe\")\n      .contentWindow.document.getElementById(\"iframeScrollPosition\");\n\n    if (iframeScrollPosition.getAttribute(\"y\")) {\n      scroll = -iframeScrollPosition.getAttribute(\"y\");\n    } else {\n      scroll = 0;\n    }\n\n    this.setState({ scrollTop: scroll + \"px\" });\n  };\n\n  _handleScroll = me => {\n    window.clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      this._updateScrollPosition();\n      setTimeout(this._updateScrollPosition(), 150);\n    }, 150);\n    this._updateScrollPosition();\n  };\n\n  componentWillUnmount() {\n    // window.removeEventListener('scroll', this._updateScrollPosition, false);\n  }\n  render() {\n    var block = this.props.block;\n    return (\n      <div>\n        <Subscribe to={[globalState]}>\n          {test => (\n            <ShowPinsDiv scrollTop={this.state.scrollTop}>\n              {test.state.pins.map((pin, i) => {\n                return <Pin key={i} pin={pin} test={test} />;\n              })}\n            </ShowPinsDiv>\n          )}\n        </Subscribe>\n      </div>\n    );\n  }\n}\n\n// export default withContainers([globalState])(ShowPins);\nexport default ShowPins;\n"]},"metadata":{},"sourceType":"module"}