{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jakecasey/Documents/Projects/Bugs/skeleton-key-frontend/components/special/ShowPins.js\";\nimport withContainers from \"../wrappers/withContainer\";\nimport { Global as globalState } from \"./Global\";\nimport React, { Component } from \"react\";\nimport { Subscribe } from \"unstated\";\nimport { getIframeScrollPosition } from \"../../lib/helpers\";\nimport styled from \"styled-components\";\nimport SickButton from \"../styles/SickButton\";\nimport Pin from \"./Pin\";\nconst ShowPinsDiv = styled.div.withConfig({\n  displayName: \"ShowPins__ShowPinsDiv\",\n  componentId: \"sc-1acb6tt-0\"\n})([\"position:absolute;top:\", \";left:0px;right:0px;bottom:0px;z-index:2;pointer-events:none;\"], props => props.scrollTop ? props.scrollTop : \"0px\");\nvar timeout = \"\";\n\nclass ShowPins extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      scrollTop: 0\n    });\n\n    _defineProperty(this, \"_updateScrollPosition\", event => {\n      var scroll = \"\";\n      var iframeScrollPosition = document.getElementById(\"iframe\").contentWindow.document.getElementById(\"iframeScrollPosition\");\n\n      if (iframeScrollPosition.getAttribute(\"y\")) {\n        scroll = -iframeScrollPosition.getAttribute(\"y\");\n      } else {\n        scroll = 0;\n      }\n\n      this.setState({\n        scrollTop: scroll + \"px\"\n      });\n    });\n\n    _defineProperty(this, \"_handleScroll\", me => {\n      window.clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        this._updateScrollPosition();\n\n        setTimeout(this._updateScrollPosition(), 150);\n      }, 150);\n\n      this._updateScrollPosition();\n    });\n  }\n\n  componentDidMount() {\n    //get initial scroll pos\n    var observer = new MutationObserver(function (mutations) {\n      mutations.forEach(function (mutation) {\n        if (!mutation.addedNodes) return;\n\n        for (var i = 0; i < mutation.addedNodes.length; i++) {\n          // do things to your newly added nodes here\n          var node = mutation.addedNodes[i];\n          console.log(node);\n        }\n      });\n    });\n    observer.observe(document.getElementById(\"iframe\").contentWindow.document.body, {\n      childList: true,\n      subtree: true,\n      attributes: false,\n      characterData: false\n    }); //TODO: THIS NEEDS TO WAIT FOR IFRAME TO EXIST\n    // setTimeout(() => {\n    //   this._updateScrollPosition();\n    //   //attach scroll listener\n    //   document\n    //     .getElementById(\"iframe\")\n    //     .contentWindow.document.addEventListener(\n    //       \"scroll\",\n    //       this._handleScroll,\n    //       false\n    //     );\n    // }, 2000);\n  } //polling is almost accurate but needs a trail off perhaps an interval or a while statement\n  //that runs several more times over a few seconds.\n\n\n  componentWillUnmount() {// window.removeEventListener('scroll', this._updateScrollPosition, false);\n  }\n\n  render() {\n    var block = this.props.block;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Subscribe, {\n      to: [globalState],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, test => React.createElement(ShowPinsDiv, {\n      scrollTop: this.state.scrollTop,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, test.state.pins.map((pin, i) => {\n      return React.createElement(Pin, {\n        key: i,\n        pin: pin,\n        test: test,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      });\n    }))));\n  }\n\n} // export default withContainers([globalState])(ShowPins);\n\n\nexport default ShowPins;","map":{"version":3,"sources":["/Users/jakecasey/Documents/Projects/Bugs/skeleton-key-frontend/components/special/ShowPins.js"],"names":["withContainers","Global","globalState","React","Component","Subscribe","getIframeScrollPosition","styled","SickButton","Pin","ShowPinsDiv","div","props","scrollTop","timeout","ShowPins","event","scroll","iframeScrollPosition","document","getElementById","contentWindow","getAttribute","setState","me","window","clearTimeout","setTimeout","_updateScrollPosition","componentDidMount","observer","MutationObserver","mutations","forEach","mutation","addedNodes","i","length","node","console","log","observe","body","childList","subtree","attributes","characterData","componentWillUnmount","render","block","test","state","pins","map","pin"],"mappings":"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","sourcesContent":["import withContainers from \"../wrappers/withContainer\";\n\nimport { Global as globalState } from \"./Global\";\nimport React, { Component } from \"react\";\nimport { Subscribe } from \"unstated\";\n\nimport { getIframeScrollPosition } from \"../../lib/helpers\";\n\nimport styled from \"styled-components\";\n\nimport SickButton from \"../styles/SickButton\";\nimport Pin from \"./Pin\";\n\nconst ShowPinsDiv = styled.div`\n  position: absolute;\n  top: ${props => (props.scrollTop ? props.scrollTop : \"0px\")};\n  left: 0px;\n  right: 0px;\n  bottom: 0px;\n  z-index: 2;\n  pointer-events: none;\n`;\n\nvar timeout = \"\";\n\nclass ShowPins extends Component {\n  state = {\n    scrollTop: 0\n  };\n\n  componentDidMount() {\n    //get initial scroll pos\n\n    var observer = new MutationObserver(function(mutations) {\n      mutations.forEach(function(mutation) {\n        if (!mutation.addedNodes) return;\n\n        for (var i = 0; i < mutation.addedNodes.length; i++) {\n          // do things to your newly added nodes here\n          var node = mutation.addedNodes[i];\n          console.log(node);\n        }\n      });\n    });\n\n    observer.observe(\n      document.getElementById(\"iframe\").contentWindow.document.body,\n      {\n        childList: true,\n        subtree: true,\n        attributes: false,\n        characterData: false\n      }\n    );\n\n    //TODO: THIS NEEDS TO WAIT FOR IFRAME TO EXIST\n    // setTimeout(() => {\n    //   this._updateScrollPosition();\n\n    //   //attach scroll listener\n    //   document\n    //     .getElementById(\"iframe\")\n    //     .contentWindow.document.addEventListener(\n    //       \"scroll\",\n    //       this._handleScroll,\n    //       false\n    //     );\n    // }, 2000);\n  }\n\n  //polling is almost accurate but needs a trail off perhaps an interval or a while statement\n  //that runs several more times over a few seconds.\n\n  _updateScrollPosition = event => {\n    var scroll = \"\";\n    var iframeScrollPosition = document\n      .getElementById(\"iframe\")\n      .contentWindow.document.getElementById(\"iframeScrollPosition\");\n\n    if (iframeScrollPosition.getAttribute(\"y\")) {\n      scroll = -iframeScrollPosition.getAttribute(\"y\");\n    } else {\n      scroll = 0;\n    }\n\n    this.setState({ scrollTop: scroll + \"px\" });\n  };\n\n  _handleScroll = me => {\n    window.clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      this._updateScrollPosition();\n      setTimeout(this._updateScrollPosition(), 150);\n    }, 150);\n    this._updateScrollPosition();\n  };\n\n  componentWillUnmount() {\n    // window.removeEventListener('scroll', this._updateScrollPosition, false);\n  }\n  render() {\n    var block = this.props.block;\n    return (\n      <div>\n        <Subscribe to={[globalState]}>\n          {test => (\n            <ShowPinsDiv scrollTop={this.state.scrollTop}>\n              {test.state.pins.map((pin, i) => {\n                return <Pin key={i} pin={pin} test={test} />;\n              })}\n            </ShowPinsDiv>\n          )}\n        </Subscribe>\n      </div>\n    );\n  }\n}\n\n// export default withContainers([globalState])(ShowPins);\nexport default ShowPins;\n"]},"metadata":{},"sourceType":"module"}