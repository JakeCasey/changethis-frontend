{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport Error from '../ErrorMessage';\nimport React, { Component } from 'react';\nimport { useRouter } from 'next/router';\nimport gql from 'graphql-tag';\nimport withContainers from '../wrappers/withContainer';\nimport { Global as globalState } from './Global';\nimport SickButton from '../styles/SickButton';\nimport styled from 'styled-components';\nimport DesignCanvas from './DesignCanvas';\nimport Toolbar from './Toolbar.js';\nimport { Url } from 'url';\nimport { frontend, prodFrontend } from '../../config';\nconst Frame = styled.iframe.withConfig({\n  displayName: \"Reporting__Frame\",\n  componentId: \"sc-5smu6h-0\"\n})([\"position:absolute;top:0px;left:0px;right:0px;bottom:0px;width:100%;height:100%;max-width:\", \";\"], props => props.width);\nconst WorkArea = styled.div.withConfig({\n  displayName: \"Reporting__WorkArea\",\n  componentId: \"sc-5smu6h-1\"\n})([\"display:flex;margin-bottom:30px;\"]);\nconst UrlBar = styled.div.withConfig({\n  displayName: \"Reporting__UrlBar\",\n  componentId: \"sc-5smu6h-2\"\n})([\"display:flex;padding:40px 0px;\"]);\nconst URL = styled.input.withConfig({\n  displayName: \"Reporting__URL\",\n  componentId: \"sc-5smu6h-3\"\n})([\"width:100%;\"]);\nconst CanvasContainer = styled.div.withConfig({\n  displayName: \"Reporting__CanvasContainer\",\n  componentId: \"sc-5smu6h-4\"\n})([\"position:relative;width:100%;height:100%;min-height:1000px;min-width:1000px;overflow-y:hidden;\"]);\n\nconst Test = props => {\n  var router = useRouter();\n  return React.createElement(\"div\", null, React.createElement(\"p\", null, \"Test\"), _JSON$stringify(router.query), props.children);\n};\n\nconst frontendUrl = process.env.NODE_ENV === 'development' ? frontend : prodFrontend;\n\nclass Reporting extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      url: 'http://bugherd.com',\n      urlSelected: frontendUrl + '/api/proxy?url=aHR0cDovL2J1Z2hlcmQuY29t'\n    });\n\n    _defineProperty(this, \"reloadIframe\", () => {\n      var urlString = frontendUrl + '/api/proxy?url=' + btoa(this.state.url);\n      console.log(this.props); // if (this.props.Global) {\n\n      this.props.Global.setCurrentIframe(urlString); // }\n\n      this.setState({\n        urlSelected: urlString\n      });\n    });\n\n    _defineProperty(this, \"updateUrl\", e => {\n      var url = e.target.value;\n      this.setState({\n        url\n      });\n    });\n\n    _defineProperty(this, \"handleKeyDown\", e => {\n      if (e.key === 'Enter') {\n        this.reloadIframe();\n      }\n    });\n\n    _defineProperty(this, \"handleScroll\", e => {});\n  }\n\n  render() {\n    // if (!this.props.Global) return <p>Loading...</p>;\n    return React.createElement(\"div\", null, React.createElement(UrlBar, null, React.createElement(URL, {\n      value: this.state.url,\n      onChange: e => {\n        this.updateUrl(e);\n      },\n      onKeyDown: e => this.handleKeyDown(e),\n      type: \"text\"\n    }), React.createElement(SickButton, {\n      onClick: () => {\n        this.reloadIframe();\n      }\n    }, \"Go\")), React.createElement(WorkArea, null, React.createElement(CanvasContainer, null, this.props.Global && this.props.Global.state.overIframe.map((OverIframe, i) => {\n      var OverIframeComponent = OverIframe.component;\n      return React.createElement(OverIframeComponent, {\n        key: i,\n        id: OverIframe.belongsTo\n      });\n    }), ' ', this.props.Global && this.props.Global.state && React.createElement(Frame, {\n      id: \"iframe\",\n      width: this.props.Global.state.iframe.size.width,\n      src: this.props.Global.state.currentIframe\n    })), React.createElement(Toolbar, null)));\n  }\n\n}\n\nexport default withContainers([globalState])(Reporting);","map":null,"metadata":{},"sourceType":"module"}