{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jakecasey/Documents/Projects/Bugs/skeleton-key-frontend/components/special/PinBlock.js\";\nimport withContainers from '../wrappers/withContainer';\nimport Global from './Global';\nimport React, { Component } from 'react';\nimport SickButton from '../styles/SickButton';\n\nvar PinBlock =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PinBlock, _Component);\n\n  function PinBlock() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PinBlock);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PinBlock)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {});\n\n    return _this;\n  }\n\n  _createClass(PinBlock, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var block = this.props.block;\n      return React.createElement(React.Fragment, null, this.props.Global.state.pins.map(function (p, index) {\n        if (p.belongsTo == _this2.props.block.id) {\n          return React.createElement(\"p\", {\n            key: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 17\n            },\n            __self: this\n          }, p.comment);\n        }\n      }), React.createElement(SickButton, {\n        onClick: function onClick() {\n          return _this2.props.Global.togglePinPlacement(_this2.props.block.id);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, this.props.Global.state.isPlacingPin ? 'Stop Placing Pins' : 'Place Pin'));\n    }\n  }]);\n\n  return PinBlock;\n}(Component);\n\nexport default withContainers([Global])(PinBlock);","map":{"version":3,"sources":["/Users/jakecasey/Documents/Projects/Bugs/skeleton-key-frontend/components/special/PinBlock.js"],"names":["withContainers","Global","React","Component","SickButton","PinBlock","block","props","state","pins","map","p","index","belongsTo","id","comment","togglePinPlacement","isPlacingPin"],"mappings":";;;;;;;;AAAA,OAAOA,cAAP,MAA2B,2BAA3B;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,UAAP,MAAuB,sBAAvB;;IAEMC,Q;;;;;;;;;;;;;;;;;;4DACI,E;;;;;;;6BAEC;AAAA;;AACP,UAAIC,KAAK,GAAG,KAAKC,KAAL,CAAWD,KAAvB;AACA,aACE,0CACG,KAAKC,KAAL,CAAWN,MAAX,CAAkBO,KAAlB,CAAwBC,IAAxB,CAA6BC,GAA7B,CAAiC,UAACC,CAAD,EAAIC,KAAJ,EAAc;AAC9C,YAAID,CAAC,CAACE,SAAF,IAAe,MAAI,CAACN,KAAL,CAAWD,KAAX,CAAiBQ,EAApC,EAAwC;AACtC,iBAAO;AAAG,YAAA,GAAG,EAAEF,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAgBD,CAAC,CAACI,OAAlB,CAAP;AACD;AACF,OAJA,CADH,EAME,oBAAC,UAAD;AACE,QAAA,OAAO,EAAE;AAAA,iBACP,MAAI,CAACR,KAAL,CAAWN,MAAX,CAAkBe,kBAAlB,CAAqC,MAAI,CAACT,KAAL,CAAWD,KAAX,CAAiBQ,EAAtD,CADO;AAAA,SADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKG,KAAKP,KAAL,CAAWN,MAAX,CAAkBO,KAAlB,CAAwBS,YAAxB,GACG,mBADH,GAEG,WAPN,CANF,CADF;AAkBD;;;;EAvBoBd,S;;AA0BvB,eAAeH,cAAc,CAAC,CAACC,MAAD,CAAD,CAAd,CAAyBI,QAAzB,CAAf","sourcesContent":["import withContainers from '../wrappers/withContainer';\n\nimport Global from './Global';\nimport React, { Component } from 'react';\n\nimport SickButton from '../styles/SickButton';\n\nclass PinBlock extends Component {\n  state = {};\n\n  render() {\n    var block = this.props.block;\n    return (\n      <>\n        {this.props.Global.state.pins.map((p, index) => {\n          if (p.belongsTo == this.props.block.id) {\n            return <p key={index}>{p.comment}</p>;\n          }\n        })}\n        <SickButton\n          onClick={() =>\n            this.props.Global.togglePinPlacement(this.props.block.id)\n          }\n        >\n          {this.props.Global.state.isPlacingPin\n            ? 'Stop Placing Pins'\n            : 'Place Pin'}\n        </SickButton>\n      </>\n    );\n  }\n}\n\nexport default withContainers([Global])(PinBlock);\n"]},"metadata":{},"sourceType":"module"}