{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Fragment } from 'react';\nimport { Container, Subscribe } from 'unstated';\nimport PinOverlay from './PinOverlay';\nimport ShowPins from './ShowPins';\nimport shortId from 'shortid';\nimport _ from 'lodash';\n\nclass Global extends Container {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      overIframe: [],\n      currentIframe: 'https://changethisfrontend.deva.io/api/proxy?url=aHR0cDovL3d3dy5nb29nbGUuY29t',\n      showPins: false,\n      showCanvas: false,\n      canvas: null,\n      iframe: {\n        size: {\n          height: 0,\n          width: 200\n        }\n      },\n      showToolbarOverlay: false,\n      toolbarOverlayContents: '',\n      toolbar: [],\n      isPlacingPin: false,\n      pins: [],\n      text: 'This is some text'\n    });\n\n    _defineProperty(this, \"addSimpleTextBlock\", () => {\n      this.toggleToolbarOverlay();\n      var simpleText = {\n        id: shortId.generate(),\n        type: 'text',\n        value: 'test',\n        label: 'test'\n      };\n      var toolbar = this.state.toolbar;\n      toolbar.push(simpleText);\n      this.setState({\n        toolbar\n      });\n    });\n\n    _defineProperty(this, \"addPinBlock\", () => {\n      this.toggleToolbarOverlay();\n      this.setState({\n        overIframe: [...this.state.overIframe, {\n          belongsTo: 'test',\n          component: ShowPins\n        }]\n      });\n      var pin = {\n        id: shortId.generate(),\n        type: 'pin'\n      }; //place pin view over iframe\n\n      var toolbar = this.state.toolbar;\n      toolbar.push(pin);\n      this.setState({\n        toolbar\n      });\n    });\n\n    _defineProperty(this, \"putComponentInToolbar\", component => {\n      this.setState({\n        toolbarOverlayContents: component\n      });\n    });\n\n    _defineProperty(this, \"toggleToolbarOverlay\", () => {\n      this.setState({\n        showToolbarOverlay: !this.state.showToolbarOverlay\n      });\n    });\n\n    _defineProperty(this, \"togglePinPlacement\", (id, block) => {\n      if (this.state.isPlacingPin) {\n        var stat = this.state.overIframe;\n        stat = _.filter(stat, function (i) {\n          return i.belongsTo != id;\n        });\n        this.setState({\n          overIframe: stat,\n          isPlacingPin: false\n        });\n      } else {\n        this.setState({\n          overIframe: [...this.state.overIframe, {\n            belongsTo: id,\n            component: PinOverlay\n          }],\n          isPlacingPin: true\n        });\n      }\n    });\n\n    _defineProperty(this, \"addPath\", () => {\n      var canvas = this.state.canvas;\n      var path = new fabric.Path('M 0 0 L 200 100 L 170 200 z');\n      path.set({\n        left: 120,\n        top: 120\n      });\n      canvas.add(path);\n      this.setState({\n        canvas\n      });\n    });\n\n    _defineProperty(this, \"addArrow\", () => {\n      var canvas = this.state.canvas;\n      fabric.loadSVGFromURL('/static/images/arrow.svg', function (objects, options) {\n        var obj = fabric.util.groupSVGElements(objects, options);\n        canvas.add(obj).renderAll();\n      });\n      this.setState({\n        canvas\n      });\n    });\n\n    _defineProperty(this, \"showCanvas\", () => {\n      this.setState({\n        showCanvas: true\n      });\n    });\n\n    _defineProperty(this, \"hideCanvas\", () => {\n      this.setState({\n        showCanvas: false\n      });\n    });\n\n    _defineProperty(this, \"instantiateCanvas\", that => {\n      const canvas = new fabric.Canvas(that.c);\n      this.setState({\n        canvas\n      });\n    });\n\n    _defineProperty(this, \"clear\", () => {\n      var canvas = this.state.canvas;\n      var canvas = canvas.clear();\n      this.setState({\n        canvas\n      });\n    });\n\n    _defineProperty(this, \"_placePin\", pin => {\n      pin.id = shortId.generate();\n      var pins = this.state.pins;\n      pins.push(pin);\n      this.setState({\n        pins\n      });\n    });\n\n    _defineProperty(this, \"_updatePinCommentByID\", (id, text, previousState) => {\n      var that = previousState;\n      _.find(that, {\n        id: id\n      }).comment = text;\n      this.setState({\n        pins: that\n      });\n    });\n\n    _defineProperty(this, \"_loadStateFromHash\", hash => {\n      var test = atob(hash);\n      var previousState = this.state;\n      test = JSON.parse(test);\n\n      if (test.pins.length > 0) {\n        previousState.overIframe = [...this.state.overIframe, {\n          belongsTo: 'test',\n          component: ShowPins\n        }];\n      }\n\n      previousState.pins = test.pins;\n      previousState.toolbar = test.toolbar;\n      this.setState(_objectSpread({}, previousState));\n    });\n\n    _defineProperty(this, \"setCurrentIframe\", url => {\n      this.setState({\n        currentIframe: url\n      });\n    });\n  }\n\n}\n\nexport { Global };","map":null,"metadata":{},"sourceType":"module"}