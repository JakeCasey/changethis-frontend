{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    users {\\n      id\\n      name\\n      email\\n      permissions\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation updatePermissions($permissions: [Permission], $userId: ID!) {\\n    updatePermissions(permissions: $permissions, userId: $userId) {\\n      id\\n      permissions\\n      name\\n      email\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Query, Mutation } from 'react-apollo';\nimport Error from '../components/ErrorMessage';\nimport gql from 'graphql-tag';\nimport Table from './styles/Table';\nimport SickButton from './styles/SickButton';\nvar possiblePermissions = ['ADMIN', 'USER', 'PERMISSIONUPDATE'];\nvar UPDATE_PERMISSIONS_MUTATION = gql(_templateObject());\nvar ALL_USERS_QUERY = gql(_templateObject2());\n\nvar Permissions = function Permissions(props) {\n  return React.createElement(Query, {\n    query: ALL_USERS_QUERY\n  }, function (_ref) {\n    var data = _ref.data,\n        loading = _ref.loading,\n        error = _ref.error;\n    if (loading) return 'Loading...';\n    if (error) return React.createElement(Error, {\n      error: error\n    });\n    return React.createElement(\"div\", null, React.createElement(\"div\", null, React.createElement(\"h2\", null, \"Manage Permissions\"), React.createElement(Table, null, React.createElement(\"thead\", null, React.createElement(\"tr\", null, React.createElement(\"th\", null, \"Name\"), React.createElement(\"th\", null, \"Email\"), possiblePermissions.map(function (permission) {\n      return React.createElement(\"th\", {\n        key: permission\n      }, permission);\n    }), React.createElement(\"th\", null, \"\\uD83D\\uDC47\"))), React.createElement(\"tbody\", null, data.users.map(function (user) {\n      return React.createElement(UserPermissions, {\n        key: user.id,\n        user: user\n      });\n    })))));\n  });\n};\n\nvar UserPermissions =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(UserPermissions, _React$Component);\n\n  function UserPermissions() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, UserPermissions);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UserPermissions)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      permissions: _this.props.user.permissions\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePermissionChange\", function (e, updatePermissions) {\n      var checkbox = e.target; //take a copy of the current permissions\n\n      var updatedPermissions = _toConsumableArray(_this.state.permissions); //figure out if we need to remove or add this permission\n\n\n      if (checkbox.checked) {\n        updatedPermissions.push(checkbox.value);\n      } else {\n        updatedPermissions = updatedPermissions.filter(function (permission) {\n          return permission !== checkbox.value;\n        });\n      } //be aware that setState is async, you can use a callback function ala node.\n\n\n      _this.setState({\n        permissions: updatedPermissions\n      }, updatePermissions);\n    });\n\n    return _this;\n  }\n\n  _createClass(UserPermissions, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var user = this.props.user;\n      return React.createElement(Mutation, {\n        mutation: UPDATE_PERMISSIONS_MUTATION,\n        variables: {\n          permissions: this.state.permissions,\n          userId: user.id\n        }\n      }, function (updatePermissions, _ref2) {\n        var loading = _ref2.loading,\n            error = _ref2.error;\n        return React.createElement(React.Fragment, null, error && React.createElement(\"tr\", null, React.createElement(\"td\", {\n          colspan: \"8\"\n        }, React.createElement(Error, {\n          error: error\n        }))), React.createElement(\"tr\", null, React.createElement(\"td\", null, user.name), React.createElement(\"td\", null, user.email), possiblePermissions.map(function (p) {\n          return React.createElement(\"td\", {\n            key: p\n          }, React.createElement(\"label\", {\n            htmlFor: \"\".concat(user.id, \"-permission-\").concat(p)\n          }, React.createElement(\"input\", {\n            id: \"\".concat(user.id, \"-permission-\").concat(p),\n            type: \"checkbox\",\n            checked: _this2.state.permissions.includes(p),\n            value: p,\n            onChange: function onChange(e) {\n              _this2.handlePermissionChange(e, updatePermissions);\n            }\n          })));\n        }), React.createElement(\"td\", null, React.createElement(SickButton, {\n          type: \"button\",\n          disabled: loading,\n          onClick: updatePermissions\n        }, ' ', \"Updat\", loading ? 'ing' : 'e'))));\n      });\n    }\n  }]);\n\n  return UserPermissions;\n}(React.Component);\n\nexport default Permissions;","map":null,"metadata":{},"sourceType":"module"}