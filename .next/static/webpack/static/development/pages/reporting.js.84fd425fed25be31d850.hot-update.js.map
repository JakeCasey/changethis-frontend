{"version":3,"file":"static/webpack/static/development/pages/reporting.js.84fd425fed25be31d850.hot-update.js","sources":["webpack:///./components/special/ShowPins.js"],"sourcesContent":["import { Global as globalState } from \"./Global\";\nimport React, { Component } from \"react\";\nimport { Subscribe } from \"unstated\";\n\nimport styled from \"styled-components\";\n\nimport SickButton from \"../styles/SickButton\";\nimport Pin from \"./Pin\";\nimport withContainers from \"../wrappers/withContainer\";\nimport { waitForIframeScrollPosition } from \"../../lib/helpers\";\n\nconst ShowPinsDiv = styled.div`\n  position: absolute;\n  top: ${props => (props.scrollTop ? props.scrollTop : \"0px\")};\n  left: 0px;\n  right: 0px;\n  bottom: 0px;\n  z-index: 2;\n  pointer-events: none;\n`;\n\nvar timeout = \"\";\n\nclass ShowPins extends Component {\n  state = {\n    scrollTop: 0\n  };\n\n  componentDidMount() {\n    //get initial scroll pos\n    console.log(\"showpins is mounted\");\n\n    //TODO: THIS NEEDS TO WAIT FOR IFRAME TO EXIST\n\n    waitForIframeScrollPosition(document, () => {\n      this._updateScrollPosition();\n      //attach scroll listener\n      // document\n      //   .getElementById(\"iframe\")\n      //   .contentWindow.document.addEventListener(\n      //     \"scroll\",\n      //     this._handleScroll,\n      //     false\n      //   );\n\n      setInterval(() => {\n        this._eventListenerThing();\n      }, 1000);\n    });\n  }\n\n  _eventListenerThing = () => {\n    document\n      .getElementById(\"iframe\")\n      .contentWindow.document.removeEventListener(\n        \"scroll\",\n        this._handleScroll,\n        false\n      );\n    //attach scroll listener\n    document\n      .getElementById(\"iframe\")\n      .contentWindow.document.addEventListener(\n        \"scroll\",\n        this._handleScroll,\n        false\n      );\n  };\n\n  //polling is almost accurate but needs a trail off perhaps an interval or a while statement\n  //that runs several more times over a few seconds.\n\n  _updateScrollPosition = event => {\n    console.log(\"update scroll position\");\n    var scroll = 0;\n    var iframeScrollPosition = document\n      .getElementById(\"iframe\")\n      .contentWindow.document.getElementById(\"iframeScrollPosition\");\n\n    if (iframeScrollPosition.getAttribute(\"y\")) {\n      scroll = -iframeScrollPosition.getAttribute(\"y\");\n    } else {\n      scroll = 0;\n    }\n\n    this.setState({ scrollTop: scroll + \"px\" });\n  };\n\n  _handleScroll = me => {\n    console.log(\"Scroll listener.\");\n    window.clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      this._updateScrollPosition();\n      setTimeout(this._updateScrollPosition(), 150);\n    }, 200);\n    this._updateScrollPosition();\n  };\n\n  componentWillUnmount() {\n    // window.removeEventListener('scroll', this._updateScrollPosition, false);\n  }\n  render() {\n    var block = this.props.block;\n    return (\n      <div>\n        <Subscribe to={[globalState]}>\n          {test => (\n            <ShowPinsDiv scrollTop={this.state.scrollTop}>\n              {test.state.pins.map((pin, i) => {\n                return <Pin key={i} pin={pin} test={test} />;\n              })}\n            </ShowPinsDiv>\n          )}\n        </Subscribe>\n      </div>\n    );\n  }\n}\n\n// export default withContainers([globalState])(ShowPins);\nexport default ShowPins;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAQA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AADA;AACA;AA0BA;AACA;AACA;AAOA;AAOA;AACA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;;;;;;AArEA;AAAA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAiDA;AAEA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAUA;;;;AA7FA;AACA;AACA;AA+FA;;;;A","sourceRoot":""}