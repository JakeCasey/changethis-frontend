{"version":3,"file":"static/webpack/static/development/pages/reporting.js.47b7039e2fc5ed875519.hot-update.js","sources":["webpack:///./components/special/BlockList.js","webpack:///./components/special/Comment.js","webpack:///./components/special/DesignCanvas.js","webpack:///./components/special/Pin.js","webpack:///./components/special/PinBlock.js","webpack:///./components/special/Reporting.js","webpack:///./components/special/Toolbar.js","webpack:///./components/special/ToolbarOverlay.js"],"sourcesContent":["import withContainers from '../wrappers/withContainer';\nimport { Global as globalState } from './Global';\nimport React, { Component } from 'react';\nimport SickButton from '../styles/SickButton';\n\nclass BlockList extends Component {\n  state = {};\n\n  render() {\n    var block = this.props.block;\n    return (\n      <>\n        <SickButton onClick={() => this.props.globalState.addSimpleTextBlock()}>\n          Add Simple Text Block\n        </SickButton>\n        <SickButton onClick={() => this.props.globalState.addPinBlock()}>\n          Add Pin Block\n        </SickButton>\n      </>\n    );\n  }\n}\n\nexport default withContainers([Global])(BlockList);\n","import React, { Component } from 'react';\n\nimport { Global as globalState } from './Global';\nimport { Subscribe } from 'unstated';\nimport _ from 'lodash';\nimport styled from 'styled-components';\nimport { Provider } from 'unstated';\n\nconst Commentarea = styled.textarea`\n  width: 100%;\n  height: 100%;\n`;\n\nclass Comment extends Component {\n  _getPlaceholder = () => {\n    var placeholders = [\n      'This needs more SPARKLE.',\n      'Can I get this in comic-sans?',\n      'I like everything about how this looks, except for how it looks.',\n      'How can we “spice” this page up?',\n      'Why don’t we add a few more colors into the mix?',\n      'This shit is gonna go viral',\n      'How about we just “spruce” this up a bit?',\n    ];\n    return _.sample(placeholders);\n    // return 'test';\n  };\n\n  _updateComment = (Global, e) => {\n    var previousState = Global.state.pins;\n\n    console.log(this.props.pin.id);\n    console.log(e.target.value);\n    console.log(previousState);\n    Global._updatePinCommentByID(\n      this.props.pin.id,\n      e.target.value,\n      previousState,\n    );\n  };\n\n  render() {\n    return (\n      <Commentarea\n        value={this.props.pin.comment}\n        onChange={e => this._updateComment(this.props.globalState, e)}\n        placeholder={this._getPlaceholder()}\n      />\n    );\n  }\n}\n\nexport default Comment;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { fabric } from 'fabric';\nimport styled from 'styled-components';\nimport { Container, Subscribe } from 'unstated';\nimport withContainers from '../wrappers/withContainer';\nimport { Global as globalState } from './Global';\n\nconst CanvasContainer = styled.div`\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  right: 0px;\n  bottom: 0px;\n  z-index: 2;\n`;\n\nclass DesignCanvas extends React.Component {\n  static propTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    width: 1440,\n    height: 1000,\n  };\n\n  state = {\n    canvas: null,\n  };\n\n  componentDidMount() {\n    this.props.globalState.instantiateCanvas(this);\n  }\n\n  render() {\n    const { width, height } = this.props;\n    var canvas = this.props.globalState;\n    return (\n      <CanvasContainer>\n        <canvas ref={c => (this.c = c)} width={width} height={height} />\n        {/* {canvas.state.canvas} */}\n      </CanvasContainer>\n    );\n  }\n}\n\nexport default withContainers([Global])(DesignCanvas);\n","import React, { Component } from 'react';\nimport { Subscribe } from 'unstated';\nimport { Global as globalState } from './Global';\nimport styled from 'styled-components';\nimport { Tooltip } from 'react-tippy';\nimport TooltipWrapper from './TooltipWrapper';\nimport Comment from './Comment';\n\nconst PinDiv = styled.div`\n  width: ${props => props.width + 'px'};\n  height: ${props => props.height + 'px'};\n  background-color: lightskyblue;\n  position: absolute;\n  top: ${props => props.pin.y + parseInt(props.pin.scrollPosition.y) + 'px'};\n  left: ${props => props.pin.x + 'px'};\n  transform: translateX(${props => -props.width / 2 + 'px'})\n    translateY(${props => -props.height / 2 + 'px'});\n  pointer-events: auto;\n`;\n\nconst Pop = styled.div`\n  width: 300px;\n  background: blue;\n`;\n\nclass Pin extends Component {\n  render() {\n    return (\n      <PinDiv key={this.props.key} width={25} height={25} pin={this.props.pin}>\n        <Tooltip\n          trigger=\"click\"\n          interactive={true}\n          html={\n            <TooltipWrapper>\n              <Comment pin={this.props.pin} global={this.props.globalState} />\n            </TooltipWrapper>\n          }\n        >\n          <div style={{ width: '100%', height: '100%' }} />\n        </Tooltip>\n      </PinDiv>\n    );\n  }\n}\n\nexport default Pin;\n","import withContainers from '../wrappers/withContainer';\n\nimport { Global as globalState } from './Global';\nimport React, { Component } from 'react';\n\nimport SickButton from '../styles/SickButton';\n\nclass PinBlock extends Component {\n  state = {};\n\n  render() {\n    var block = this.props.block;\n    return (\n      <>\n        {this.props.globalState &&\n          this.props.globalState.state.pins.map((p, index) => {\n            if (p.belongsTo == this.props.block.id) {\n              return <p key={index}>{p.comment}</p>;\n            }\n          })}\n        <SickButton\n          onClick={() =>\n            this.props.globalState.togglePinPlacement(this.props.block.id)\n          }\n        >\n          {this.props.globalState && this.props.globalState.state.isPlacingPin\n            ? 'Stop Placing Pins'\n            : 'Place Pin'}\n        </SickButton>\n      </>\n    );\n  }\n}\n\nexport default withContainers([Global])(PinBlock);\n","import Error from '../ErrorMessage';\nimport React, { Component } from 'react';\nimport { useRouter } from 'next/router';\nimport gql from 'graphql-tag';\n\nimport withContainers from '../wrappers/withContainer';\nimport { Global as globalState } from './Global';\n\nimport SickButton from '../styles/SickButton';\nimport styled from 'styled-components';\nimport DesignCanvas from './DesignCanvas';\nimport Toolbar from './Toolbar.js';\nimport { Url } from 'url';\nimport { frontend, prodFrontend } from '../../config';\n\nconst Frame = styled.iframe`\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  right: 0px;\n  bottom: 0px;\n  width: 100%;\n  height: 100%;\n  max-width: ${props => props.width};\n`;\n\nconst WorkArea = styled.div`\n  display: flex;\n  margin-bottom: 30px;\n`;\n\nconst UrlBar = styled.div`\n  display: flex;\n  padding: 40px 0px;\n`;\n\nconst URL = styled.input`\n  width: 100%;\n`;\nconst CanvasContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  min-height: 1000px;\n  min-width: 1000px;\n  overflow-y: hidden;\n`;\n\nconst Test = props => {\n  var router = useRouter();\n\n  return (\n    <div>\n      <p>Test</p>\n      {JSON.stringify(router.query)}\n      {props.children}\n    </div>\n  );\n};\n\nconst frontendUrl =\n  process.env.NODE_ENV === 'development' ? frontend : prodFrontend;\n\nclass Reporting extends Component {\n  state = {\n    url: 'http://bugherd.com',\n    urlSelected: frontendUrl + '/api/proxy?url=aHR0cDovL2J1Z2hlcmQuY29t',\n  };\n\n  reloadIframe = () => {\n    var urlString = frontendUrl + '/api/proxy?url=' + btoa(this.state.url);\n    console.log(this.props);\n    // if (this.props.globalState) {\n    this.props.globalStateTest.setCurrentIframe(urlString);\n    // }\n\n    this.setState({ urlSelected: urlString });\n  };\n\n  updateUrl = e => {\n    var url = e.target.value;\n    this.setState({ url });\n  };\n\n  handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      this.reloadIframe();\n    }\n  };\n\n  handleScroll = e => {};\n\n  render() {\n    // if (!this.props.globalStateTest) return <p>Loading...</p>;\n    return (\n      <div>\n        <UrlBar>\n          <URL\n            value={this.state.url}\n            onChange={e => {\n              this.updateUrl(e);\n            }}\n            onKeyDown={e => this.handleKeyDown(e)}\n            type=\"text\"\n          />\n          <SickButton\n            onClick={() => {\n              this.reloadIframe();\n            }}\n          >\n            Go\n          </SickButton>\n        </UrlBar>\n        <WorkArea>\n          <CanvasContainer>\n            {this.props.globalStateTest &&\n              this.props.globalStateTest.state.overIframe.map((OverIframe, i) => {\n                var OverIframeComponent = OverIframe.component;\n                return (\n                  <OverIframeComponent key={i} id={OverIframe.belongsTo} />\n                );\n              })}{' '}\n            {this.props.globalStateTest && this.props.globalStateTest.state && (\n              <Frame\n                id=\"iframe\"\n                width={this.props.globalStateTest.state.iframe.size.width}\n                src={this.props.globalStateTest.state.currentIframe}\n              />\n            )}\n            {/* <DesignCanvas /> */}\n          </CanvasContainer>\n          <Toolbar />\n        </WorkArea>\n      </div>\n    );\n  }\n}\n\nexport default withContainers([globalTest])(Reporting);\n","import React, { Component } from 'react';\nimport SickButton from '../styles/SickButton';\nimport styled from 'styled-components';\nimport withContainers from '../wrappers/withContainer';\nimport { Global as globalState } from './Global';\nimport ToolbarOverlay from './ToolbarOverlay';\nimport BlockList from './BlockList';\nimport btoa from 'btoa';\nimport Clipboard from 'react-clipboard.js';\n\n// Blocks\nimport SimpleTextBlock from './SimpleTextBlock';\nimport PinBlock from './PinBlock';\n\nconst ToolbarDiv = styled.div`\n  width: 100%;\n  max-width: 300px;\n  z-index: 10;\n  background-color: #d2ddec;\n  padding: 40px;\n  position: relative;\n\n  p {\n    margin: 0px;\n  }\n`;\n\nclass Toolbar extends Component {\n  // state = {\n  //   base64: btoa(JSON.stringify(this.props.globalState.state)),\n  // };\n\n  state = {\n    base64: '',\n  };\n\n  showBlocks = () => {\n    //place component in state\n    this.props.globalState.putComponentInToolbar(<BlockList />);\n\n    //open toolbar\n    this.props.globalState.toggleToolbarOverlay();\n  };\n\n  showCanvasOptions = () => {};\n\n  handlebase64Update = e => {\n    this.setState({ base64: e.target.value });\n  };\n\n  _updateState = () => {\n    this.props.globalState._loadStateFromHash(this.state.base64);\n  };\n\n  render() {\n    var canvas = this.props.globalState;\n    // var toolbar = this.props.globalState.state.toolbar;\n    return (\n      <ToolbarDiv>\n        {this.props.globalState &&\n          this.props.globalState.state.toolbar.map((block, i) => {\n            var type = block.type;\n            switch (type) {\n              case 'text':\n                return <SimpleTextBlock key={i} block={block} />;\n                break;\n              case 'pin':\n                return <PinBlock key={i} block={block} />;\n                break;\n            }\n          })}\n\n        <SickButton onClick={() => this.showBlocks()}>Add Block</SickButton>\n        <p ref={textarea => (this.textArea = textarea)}>{}</p>\n        {this.props.globalState && (\n          <Clipboard\n            component={SickButton}\n            data-clipboard-text={btoa(JSON.stringify(this.props.globalState.state))}\n          >\n            copy to clipboard\n          </Clipboard>\n        )}\n\n        <textarea onChange={e => this.handlebase64Update(e)} />\n\n        <SickButton onClick={() => this._updateState()}>\n          {' '}\n          Update State From String\n        </SickButton>\n\n        <ToolbarOverlay />\n\n        {/* <ToolbarOverlay>\n          <SickButton\n            onClick={() => {\n              canvas.addPath();\n            }}\n          >\n            Add Rectangle\n          </SickButton>\n          <SickButton\n            onClick={() => {\n              canvas.clear();\n            }}\n          >\n            Clear\n          </SickButton>\n          <SickButton\n            onClick={() => {\n              canvas.addArrow();\n            }}\n          >\n            Add Arrow\n          </SickButton>\n        </ToolbarOverlay> */}\n      </ToolbarDiv>\n    );\n  }\n}\n\nexport default withContainers([Global])(Toolbar);\n","import React, { Component } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { Transition } from 'react-spring';\nimport withContainers from '../wrappers/withContainer';\nimport { Global as globalState } from './Global';\n\nconst ToolbarOverlayDiv = styled.div`\n  padding: 40px;\n  background: #edf1f5;\n  position: absolute;\n  transform: translate3d(${props => props.transform3d} + '%', 0, 0);\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`;\n\nclass ToolbarOverlay extends Component {\n  render() {\n    return (\n      <div>\n        {this.props.globalState && (\n          <Transition\n            items={this.props.globalState.state.showToolbarOverlay}\n            from={{\n              opacity: 0,\n            }}\n            enter={{ opacity: 1 }}\n            leave={{ opacity: 0 }}\n          >\n            {show =>\n              show &&\n              (props => (\n                <ToolbarOverlayDiv style={props}>\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"48\"\n                    height=\"48\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"#000000\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"square\"\n                    strokeLinejoin=\"arcs\"\n                    onClick={() => this.props.globalState.toggleToolbarOverlay()}\n                  >\n                    <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\n                    <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\n                  </svg>\n                  {this.props.globalState.state.toolbarOverlayContents}\n                </ToolbarOverlayDiv>\n              ))\n            }\n          </Transition>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withContainers([Global])(ToolbarOverlay);\n"],"mappings":"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","sourceRoot":""}