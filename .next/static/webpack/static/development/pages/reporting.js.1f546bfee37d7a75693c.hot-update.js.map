{"version":3,"file":"static/webpack/static/development/pages/reporting.js.1f546bfee37d7a75693c.hot-update.js","sources":["webpack:///./components/special/PinOverlay.js"],"sourcesContent":["import withContainers from \"../wrappers/withContainer\";\n\nimport { Global as globalState } from \"./Global\";\nimport React, { Component } from \"react\";\nimport { Subscribe } from \"unstated\";\n\nimport styled from \"styled-components\";\nimport shortid from \"shortid\";\n\nimport SickButton from \"../styles/SickButton\";\n\nconst PinOverlayDiv = styled.div`\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  right: 0px;\n  bottom: 0px;\n  z-index: 2;\n  pointer-events: ${props => (props.showPointerEvents ? \"auto\" : \"none\")};\n`;\n\nclass PinOverlay extends Component {\n  state = {\n    showPointerEvents: true,\n    pin: { x: \"\", y: \"\" }\n  };\n\n  componentDidMount() {\n    this.setState({\n      pin: {\n        belongsTo: this.props.id,\n        x: \"\",\n        y: \"\",\n        comment: \"\"\n      }\n    });\n  }\n\n  _onMouseMove = e => {\n    var rect = e.target.getBoundingClientRect();\n    var x = e.clientX - rect.left; //x position within the element.\n    var y = e.clientY - rect.top; //y position within the element.\n\n    //get scroll position;\n    var scroll;\n\n    var iframeScrollPosition = document\n      .getElementById(\"iframe\")\n      .contentWindow.document.getElementById(\"iframeScrollPosition\");\n\n    if (typeof iframeScrollPosition !== \"undefined\") {\n      scroll = iframeScrollPosition.getAttribute(\"y\");\n    } else {\n      scroll = \"0\";\n    }\n\n    // this.setState({ pin: { ...this.state.pin, x: e.screenX, y: e.screenY } });\n    this.setState({\n      pin: { ...this.state.pin, x: x, y: y, scrollPosition: { y: scroll } }\n    });\n  };\n\n  _handlePinClick = Global => {\n    Global._placePin(this.state.pin);\n\n    // Global._placePin(this.state.pin);\n  };\n\n  _removePointerEvents = () => {\n    this.setState({ showPointerEvents: false });\n  };\n\n  render() {\n    var block = this.props.block;\n    return (\n      <div>\n        <Subscribe to={[globalState]}>\n          {globalState => (\n            <PinOverlayDiv\n              showPointerEvents={this.state.showPointerEvents}\n              onClick={() => this._handlePinClick(globalState)}\n              onMouseMove={e => this._onMouseMove(e)}\n            >\n              {this.state.pin.x}\" \"{this.state.pin.y}\n            </PinOverlayDiv>\n          )}\n        </Subscribe>\n      </div>\n    );\n  }\n}\n\n// export default withContainers([globalState])(PinOverlay);\nexport default PinOverlay;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAOA;AAAA;AACA;AAEA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AACA;AAeA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AA5CA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;;;AAoCA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAYA;;;;AApEA;AACA;AACA;AAsEA;;;;A","sourceRoot":""}