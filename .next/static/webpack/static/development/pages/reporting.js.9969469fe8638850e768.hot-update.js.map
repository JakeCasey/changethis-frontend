{"version":3,"file":"static/webpack/static/development/pages/reporting.js.9969469fe8638850e768.hot-update.js","sources":["webpack:///./components/special/ShowPins.js"],"sourcesContent":["import withContainers from \"../wrappers/withContainer\";\n\nimport { Global as globalState } from \"./Global\";\nimport React, { Component } from \"react\";\nimport { Subscribe } from \"unstated\";\n\nimport { getIframeScrollPosition } from \"../../lib/helpers\";\n\nimport styled from \"styled-components\";\n\nimport SickButton from \"../styles/SickButton\";\nimport Pin from \"./Pin\";\n\nconst ShowPinsDiv = styled.div`\n  position: absolute;\n  top: ${props => (props.scrollTop ? props.scrollTop : \"0px\")};\n  left: 0px;\n  right: 0px;\n  bottom: 0px;\n  z-index: 2;\n  pointer-events: none;\n`;\n\nvar timeout = \"\";\n\nclass ShowPins extends Component {\n  state = {\n    scrollTop: 0\n  };\n\n  componentDidMount() {\n    //get initial scroll pos\n\n    var observer = new MutationObserver(function(mutations) {\n      mutations.forEach(function(mutation) {\n        if (!mutation.addedNodes) return;\n\n        for (var i = 0; i < mutation.addedNodes.length; i++) {\n          // do things to your newly added nodes here\n          var node = mutation.addedNodes[i];\n          console.log(node);\n        }\n      });\n    });\n\n    console.log(\"Component Loaded\");\n    observer.observe(\n      document.getElementById(\"iframe\").contentWindow.document.body,\n      {\n        childList: true,\n        subtree: true,\n        attributes: false,\n        characterData: false\n      }\n    );\n\n    //TODO: THIS NEEDS TO WAIT FOR IFRAME TO EXIST\n    // setTimeout(() => {\n    //   this._updateScrollPosition();\n\n    //   //attach scroll listener\n    //   document\n    //     .getElementById(\"iframe\")\n    //     .contentWindow.document.addEventListener(\n    //       \"scroll\",\n    //       this._handleScroll,\n    //       false\n    //     );\n    // }, 2000);\n  }\n\n  //polling is almost accurate but needs a trail off perhaps an interval or a while statement\n  //that runs several more times over a few seconds.\n\n  _updateScrollPosition = event => {\n    var scroll = \"\";\n    var iframeScrollPosition = document\n      .getElementById(\"iframe\")\n      .contentWindow.document.getElementById(\"iframeScrollPosition\");\n\n    if (iframeScrollPosition.getAttribute(\"y\")) {\n      scroll = -iframeScrollPosition.getAttribute(\"y\");\n    } else {\n      scroll = 0;\n    }\n\n    this.setState({ scrollTop: scroll + \"px\" });\n  };\n\n  _handleScroll = me => {\n    window.clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      this._updateScrollPosition();\n      setTimeout(this._updateScrollPosition(), 150);\n    }, 150);\n    this._updateScrollPosition();\n  };\n\n  componentWillUnmount() {\n    // window.removeEventListener('scroll', this._updateScrollPosition, false);\n  }\n  render() {\n    var block = this.props.block;\n    return (\n      <div>\n        <Subscribe to={[globalState]}>\n          {test => (\n            <ShowPinsDiv scrollTop={this.state.scrollTop}>\n              {test.state.pins.map((pin, i) => {\n                return <Pin key={i} pin={pin} test={test} />;\n              })}\n            </ShowPinsDiv>\n          )}\n        </Subscribe>\n      </div>\n    );\n  }\n}\n\n// export default withContainers([globalState])(ShowPins);\nexport default ShowPins;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAQA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AADA;AACA;AA+CA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;;;;;;AAnEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAJA;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;AAyBA;AAEA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAUA;;;;AA3FA;AACA;AACA;AA6FA;;;;A","sourceRoot":""}