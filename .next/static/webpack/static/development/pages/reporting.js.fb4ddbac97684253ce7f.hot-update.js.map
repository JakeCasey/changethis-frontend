{"version":3,"file":"static/webpack/static/development/pages/reporting.js.fb4ddbac97684253ce7f.hot-update.js","sources":["webpack:///./components/special/Toolbar.js"],"sourcesContent":["import React, { Component } from 'react';\nimport SickButton from '../styles/SickButton';\nimport styled from 'styled-components';\nimport withContainers from '../wrappers/withContainer';\nimport Global from './Global';\nimport ToolbarOverlay from './ToolbarOverlay';\nimport BlockList from './BlockList';\nimport btoa from 'btoa';\nimport Clipboard from 'react-clipboard.js';\n\n// Blocks\nimport SimpleTextBlock from './SimpleTextBlock';\nimport PinBlock from './PinBlock';\n\nconst ToolbarDiv = styled.div`\n  width: 100%;\n  max-width: 300px;\n  z-index: 10;\n  background-color: #d2ddec;\n  padding: 40px;\n  position: relative;\n\n  p {\n    margin: 0px;\n  }\n`;\n\nclass Toolbar extends Component {\n  // state = {\n  //   base64: btoa(JSON.stringify(this.props.Global.state)),\n  // };\n\n  state = {\n    base64: '',\n  };\n\n  showBlocks = () => {\n    //place component in state\n    this.props.Global.putComponentInToolbar(<BlockList />);\n\n    //open toolbar\n    this.props.Global.toggleToolbarOverlay();\n  };\n\n  showCanvasOptions = () => {};\n\n  handlebase64Update = e => {\n    this.setState({ base64: e.target.value });\n  };\n\n  _updateState = () => {\n    this.props.Global._loadStateFromHash(this.state.base64);\n  };\n\n  render() {\n    var canvas = this.props.Global;\n    // var toolbar = this.props.Global.state.toolbar;\n    return (\n      <ToolbarDiv>\n        {this.props.Global &&\n          this.props.Global.state.toolbar.map((block, i) => {\n            var type = block.type;\n            switch (type) {\n              case 'text':\n                return <SimpleTextBlock key={i} block={block} />;\n                break;\n              case 'pin':\n                return <PinBlock key={i} block={block} />;\n                break;\n            }\n          })}\n\n        <SickButton onClick={() => this.showBlocks()}>Add Block</SickButton>\n        <p ref={textarea => (this.textArea = textarea)}>{}</p>\n        {this.props.Global && (\n          <Clipboard\n            component={SickButton}\n            data-clipboard-text={btoa(JSON.stringify(this.props.Global.state))}\n          >\n            copy to clipboard\n          </Clipboard>\n        )}\n\n        <textarea onChange={e => this.handlebase64Update(e)} />\n\n        <SickButton onClick={() => this._updateState()}>\n          {' '}\n          Update State From String\n        </SickButton>\n\n        <ToolbarOverlay />\n\n        {/* <ToolbarOverlay>\n          <SickButton\n            onClick={() => {\n              canvas.addPath();\n            }}\n          >\n            Add Rectangle\n          </SickButton>\n          <SickButton\n            onClick={() => {\n              canvas.clear();\n            }}\n          >\n            Clear\n          </SickButton>\n          <SickButton\n            onClick={() => {\n              canvas.addArrow();\n            }}\n          >\n            Add Arrow\n          </SickButton>\n        </ToolbarOverlay> */}\n      </ToolbarDiv>\n    );\n  }\n}\n\nexport default withContainers([Global])(Toolbar);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAYA;;;;;;;;;;;;;;;;;;AAKA;AACA;AADA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AANA;AAQA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;;;;AA1FA;AACA;AA4FA;;;;A","sourceRoot":""}