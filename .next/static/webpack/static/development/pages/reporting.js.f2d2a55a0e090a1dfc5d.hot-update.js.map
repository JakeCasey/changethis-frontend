{"version":3,"file":"static/webpack/static/development/pages/reporting.js.f2d2a55a0e090a1dfc5d.hot-update.js","sources":["webpack:///./components/special/Global.js"],"sourcesContent":["import React, { Fragment } from \"react\";\nimport { Container, Subscribe } from \"unstated\";\nimport PinOverlay from \"./PinOverlay\";\nimport ShowPins from \"./ShowPins\";\nimport shortId from \"shortid\";\nimport _ from \"lodash\";\nimport { frontend, prodFrontend } from \"../../config\";\nimport { endpoint, prodEndPoint } from \"../../config\";\n\nconst backendUrl =\n  process.env.NODE_ENV === \"development\" ? endpoint : prodEndPoint;\nvar frontendUrl =\n  process.env.NODE_ENV === \"development\" ? frontend : prodFrontend;\n\nclass Global extends Container {\n  state = {\n    overIframe: [],\n    urlSelected: backendUrl + \"/api/screenshot?url=http://bugherd.com\",\n    pageLoading: true,\n    showPins: true,\n    showCanvas: false,\n    canvas: null,\n    iframe: {\n      size: { height: 0, width: 200 }\n    },\n    showToolbarOverlay: false,\n    toolbarOverlayContents: \"\",\n    toolbar: [],\n    isPlacingPin: false,\n    pins: [],\n    text: \"This is some text\"\n  };\n\n  addSimpleTextBlock = () => {\n    this.toggleToolbarOverlay();\n\n    var simpleText = {\n      id: shortId.generate(),\n      type: \"text\",\n      value: \"test\",\n      label: \"test\"\n    };\n\n    var toolbar = this.state.toolbar;\n\n    toolbar.push(simpleText);\n\n    this.setState({ toolbar });\n  };\n\n  addPinBlock = () => {\n    this.toggleToolbarOverlay();\n\n    this.setState({\n      overIframe: [\n        ...this.state.overIframe,\n        { belongsTo: \"test\", component: ShowPins }\n      ]\n    });\n\n    var pin = {\n      id: shortId.generate(),\n      type: \"pin\"\n    };\n\n    //place pin view over iframe\n\n    var toolbar = this.state.toolbar;\n\n    toolbar.push(pin);\n\n    this.setState({ toolbar });\n  };\n\n  putComponentInToolbar = component => {\n    this.setState({ toolbarOverlayContents: component });\n  };\n\n  toggleToolbarOverlay = () => {\n    this.setState({ showToolbarOverlay: !this.state.showToolbarOverlay });\n  };\n\n  togglePinPlacement = (id, block) => {\n    if (this.state.isPlacingPin) {\n      var stat = this.state.overIframe;\n\n      stat = _.filter(stat, function(i) {\n        return i.belongsTo != id;\n      });\n\n      this.setState({\n        overIframe: stat,\n        isPlacingPin: false\n      });\n    } else {\n      this.setState({\n        overIframe: [\n          ...this.state.overIframe,\n          { belongsTo: id, component: PinOverlay }\n        ],\n        isPlacingPin: true\n      });\n    }\n  };\n\n  addPath = () => {\n    var canvas = this.state.canvas;\n    var path = new fabric.Path(\"M 0 0 L 200 100 L 170 200 z\");\n    path.set({ left: 120, top: 120 });\n    canvas.add(path);\n    this.setState({ canvas });\n  };\n\n  addArrow = () => {\n    var canvas = this.state.canvas;\n    fabric.loadSVGFromURL(\"/static/images/arrow.svg\", function(\n      objects,\n      options\n    ) {\n      var obj = fabric.util.groupSVGElements(objects, options);\n      canvas.add(obj).renderAll();\n    });\n    this.setState({ canvas });\n  };\n\n  showCanvas = () => {\n    this.setState({ showCanvas: true });\n  };\n\n  hideCanvas = () => {\n    this.setState({ showCanvas: false });\n  };\n\n  instantiateCanvas = that => {\n    const canvas = new fabric.Canvas(that.c);\n    this.setState({ canvas });\n  };\n\n  clear = () => {\n    var canvas = this.state.canvas;\n    var canvas = canvas.clear();\n    this.setState({ canvas });\n  };\n\n  _placePin = pin => {\n    pin.id = shortId.generate();\n    var pins = this.state.pins;\n    pins.push(pin);\n    this.setState({ pins });\n\n    console.log(\"Pin placed.\");\n  };\n\n  _updatePinCommentByID = (id, text, previousState) => {\n    var that = previousState;\n    _.find(that, { id: id }).comment = text;\n    this.setState({ pins: that });\n  };\n\n  _;\n\n  _loadStateFromHash = hash => {\n    var hash = atob(hash);\n    var previousState = this.state;\n    hash = JSON.parse(hash);\n    console.log(\"Hash loaded.\");\n\n    if (hash.pins.length > 0) {\n      previousState.overIframe = [\n        {\n          belongsTo: \"test\",\n          component: ShowPins\n        }\n      ];\n    }\n    previousState.pins = _.cloneDeep(hash.pins);\n    previousState.toolbar = hash.toolbar;\n    previousState.urlSelected = hash.urlSelected;\n    previousState.isPlacingPin = false;\n    this.setState({ ...previousState });\n  };\n\n  fetchPage = url => {\n    this.setState({\n      urlSelected: backendUrl + \"/api/screenshot?url=\" + url\n    });\n  };\n}\n\nexport { Global };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAfA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAHA;AACA;AAMA;AACA;AACA;AAFA;AACA;AAMA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;;;AA7KA;AACA;;;;;A","sourceRoot":""}