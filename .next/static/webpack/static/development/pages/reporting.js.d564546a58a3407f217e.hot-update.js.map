{"version":3,"file":"static/webpack/static/development/pages/reporting.js.d564546a58a3407f217e.hot-update.js","sources":["webpack:///./components/special/BlockList.js","webpack:///./components/special/DesignCanvas.js","webpack:///./components/special/PinBlock.js","webpack:///./components/special/PinOverlay.js","webpack:///./components/special/ShowPins.js","webpack:///./components/special/SimpleTextBlock.js","webpack:///./components/special/Toolbar.js","webpack:///./components/special/ToolbarOverlay.js"],"sourcesContent":["import withContainers from '../wrappers/withContainer';\nimport { Global as globalState } from './Global';\nimport React, { Component } from 'react';\nimport SickButton from '../styles/SickButton';\n\nclass BlockList extends Component {\n  state = {};\n\n  render() {\n    var block = this.props.block;\n    return (\n      <>\n        <SickButton onClick={() => this.props.globalState.addSimpleTextBlock()}>\n          Add Simple Text Block\n        </SickButton>\n        <SickButton onClick={() => this.props.globalState.addPinBlock()}>\n          Add Pin Block\n        </SickButton>\n      </>\n    );\n  }\n}\n\nexport default withContainers([globalState])(BlockList);\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { fabric } from 'fabric';\nimport styled from 'styled-components';\nimport { Container, Subscribe } from 'unstated';\nimport withContainers from '../wrappers/withContainer';\nimport { Global as globalState } from './Global';\n\nconst CanvasContainer = styled.div`\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  right: 0px;\n  bottom: 0px;\n  z-index: 2;\n`;\n\nclass DesignCanvas extends React.Component {\n  static propTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    width: 1440,\n    height: 1000,\n  };\n\n  state = {\n    canvas: null,\n  };\n\n  componentDidMount() {\n    this.props.globalState.instantiateCanvas(this);\n  }\n\n  render() {\n    const { width, height } = this.props;\n    var canvas = this.props.globalState;\n    return (\n      <CanvasContainer>\n        <canvas ref={c => (this.c = c)} width={width} height={height} />\n        {/* {canvas.state.canvas} */}\n      </CanvasContainer>\n    );\n  }\n}\n\nexport default withContainers([globalState])(DesignCanvas);\n","import withContainers from '../wrappers/withContainer';\n\nimport { Global as globalState } from './Global';\nimport React, { Component } from 'react';\n\nimport SickButton from '../styles/SickButton';\n\nclass PinBlock extends Component {\n  state = {};\n\n  render() {\n    var block = this.props.block;\n    return (\n      <>\n        {this.props.globalState &&\n          this.props.globalState.state.pins.map((p, index) => {\n            if (p.belongsTo == this.props.block.id) {\n              return <p key={index}>{p.comment}</p>;\n            }\n          })}\n        <SickButton\n          onClick={() =>\n            this.props.globalState.togglePinPlacement(this.props.block.id)\n          }\n        >\n          {this.props.globalState && this.props.globalState.state.isPlacingPin\n            ? 'Stop Placing Pins'\n            : 'Place Pin'}\n        </SickButton>\n      </>\n    );\n  }\n}\n\nexport default withContainers([globalState])(PinBlock);\n","import withContainers from '../wrappers/withContainer';\n\nimport { Global as globalState } from './Global';\nimport React, { Component } from 'react';\nimport { Subscribe } from 'unstated';\n\nimport styled from 'styled-components';\nimport shortid from 'shortid';\n\nimport SickButton from '../styles/SickButton';\n\nconst PinOverlayDiv = styled.div`\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  right: 0px;\n  bottom: 0px;\n  z-index: 2;\n  pointer-events: ${props => (props.showPointerEvents ? 'auto' : 'none')};\n`;\n\nclass PinOverlay extends Component {\n  state = {\n    showPointerEvents: true,\n    pin: { x: '', y: '' },\n  };\n\n  componentDidMount() {\n    this.setState({\n      pin: {\n        belongsTo: this.props.id,\n        x: '',\n        y: '',\n        comment: '',\n      },\n    });\n  }\n\n  _onMouseMove = e => {\n    var rect = e.target.getBoundingClientRect();\n    var x = e.clientX - rect.left; //x position within the element.\n    var y = e.clientY - rect.top; //y position within the element.\n\n    //get scroll position;\n    var scroll;\n\n    var iframeScrollPosition = document\n      .getElementById('iframe')\n      .contentWindow.document.getElementById('iframeScrollPosition');\n\n    if (iframeScrollPosition.getAttribute('y')) {\n      scroll = iframeScrollPosition.getAttribute('y');\n    } else {\n      scroll = '0';\n    }\n\n    // this.setState({ pin: { ...this.state.pin, x: e.screenX, y: e.screenY } });\n    this.setState({\n      pin: { ...this.state.pin, x: x, y: y, scrollPosition: { y: scroll } },\n    });\n  };\n\n  _handlePinClick = Global => {\n    Global._placePin(this.state.pin);\n\n    // Global._placePin(this.state.pin);\n  };\n\n  _removePointerEvents = () => {\n    this.setState({ showPointerEvents: false });\n  };\n\n  render() {\n    var block = this.props.block;\n    return (\n      <div>\n        <Subscribe to={[Global]}>\n          {Global => (\n            <PinOverlayDiv\n              showPointerEvents={this.state.showPointerEvents}\n              onClick={() => this._handlePinClick(Global)}\n              onMouseMove={e => this._onMouseMove(e)}\n            >\n              {this.state.pin.x}\" \"{this.state.pin.y}\n            </PinOverlayDiv>\n          )}\n        </Subscribe>\n      </div>\n    );\n  }\n}\n\n// export default withContainers([globalState])(PinOverlay);\nexport default PinOverlay;\n","import withContainers from '../wrappers/withContainer';\n\nimport { Global as globalState } from './Global';\nimport React, { Component } from 'react';\nimport { Subscribe } from 'unstated';\n\nimport { getIframeScrollPosition } from '../../lib/helpers';\n\nimport styled from 'styled-components';\n\nimport SickButton from '../styles/SickButton';\nimport Pin from './Pin';\n\nconst ShowPinsDiv = styled.div`\n  position: absolute;\n  top: ${props => (props.scrollTop ? props.scrollTop : '0px')};\n  left: 0px;\n  right: 0px;\n  bottom: 0px;\n  z-index: 2;\n  pointer-events: none;\n`;\n\nvar timeout = '';\n\nclass ShowPins extends Component {\n  state = {\n    scrollTop: 0,\n  };\n\n  componentDidMount() {\n    //get initial scroll pos\n\n    this._updateScrollPosition();\n    //attach scroll listener\n    var iframeScrollPosition = document\n      .getElementById('iframe')\n      .contentWindow.document.addEventListener(\n        'scroll',\n        this._handleScroll,\n        false,\n      );\n  }\n\n  //polling is almost accurate but needs a trail off perhaps an interval or a while statement\n  //that runs several more times over a few seconds.\n\n  _updateScrollPosition = event => {\n    var scroll = '';\n    var iframeScrollPosition = document\n      .getElementById('iframe')\n      .contentWindow.document.getElementById('iframeScrollPosition');\n\n    if (iframeScrollPosition.getAttribute('y')) {\n      scroll = -iframeScrollPosition.getAttribute('y');\n    } else {\n      scroll = 0;\n    }\n\n    this.setState({ scrollTop: scroll + 'px' });\n  };\n\n  _handleScroll = () => {\n    window.clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      this._updateScrollPosition();\n      setTimeout(this._updateScrollPosition(), 150);\n    }, 150);\n    this._updateScrollPosition();\n  };\n\n  componentWillUnmount() {\n    // window.removeEventListener('scroll', this._updateScrollPosition, false);\n  }\n  render() {\n    var block = this.props.block;\n    return (\n      <div>\n        <Subscribe to={[Global]}>\n          {Global => (\n            <ShowPinsDiv scrollTop={this.state.scrollTop}>\n              {Global.state.pins.map((pin, i) => {\n                return <Pin key={i} pin={pin} global={Global} />;\n              })}\n            </ShowPinsDiv>\n          )}\n        </Subscribe>\n      </div>\n    );\n  }\n}\n\n// export default withContainers([globalState])(ShowPins);\nexport default ShowPins;\n","import withContainers from '../wrappers/withContainer';\nimport { Global as globalState } from './Global';\nimport React, { Component } from 'react';\n\nclass SimpleTextBlock extends Component {\n  state = {};\n\n  render() {\n    var block = this.props.block;\n    return (\n      <>\n        <p>{block.label}</p>\n        <p>{block.value}</p>\n      </>\n    );\n  }\n}\n\nexport default withContainers([globalState])(SimpleTextBlock);\n","import React, { Component } from 'react';\nimport SickButton from '../styles/SickButton';\nimport styled from 'styled-components';\nimport withContainers from '../wrappers/withContainer';\nimport { Global as globalState } from './Global';\nimport ToolbarOverlay from './ToolbarOverlay';\nimport BlockList from './BlockList';\nimport btoa from 'btoa';\nimport Clipboard from 'react-clipboard.js';\n\n// Blocks\nimport SimpleTextBlock from './SimpleTextBlock';\nimport PinBlock from './PinBlock';\n\nconst ToolbarDiv = styled.div`\n  width: 100%;\n  max-width: 300px;\n  z-index: 10;\n  background-color: #d2ddec;\n  padding: 40px;\n  position: relative;\n\n  p {\n    margin: 0px;\n  }\n`;\n\nclass Toolbar extends Component {\n  // state = {\n  //   base64: btoa(JSON.stringify(this.props.globalState.state)),\n  // };\n\n  state = {\n    base64: '',\n  };\n\n  showBlocks = () => {\n    //place component in state\n    this.props.globalState.putComponentInToolbar(<BlockList />);\n\n    //open toolbar\n    this.props.globalState.toggleToolbarOverlay();\n  };\n\n  showCanvasOptions = () => {};\n\n  handlebase64Update = e => {\n    this.setState({ base64: e.target.value });\n  };\n\n  _updateState = () => {\n    this.props.globalState._loadStateFromHash(this.state.base64);\n  };\n\n  render() {\n    var canvas = this.props.globalState;\n    // var toolbar = this.props.globalState.state.toolbar;\n    return (\n      <ToolbarDiv>\n        {this.props.globalState &&\n          this.props.globalState.state.toolbar.map((block, i) => {\n            var type = block.type;\n            switch (type) {\n              case 'text':\n                return <SimpleTextBlock key={i} block={block} />;\n                break;\n              case 'pin':\n                return <PinBlock key={i} block={block} />;\n                break;\n            }\n          })}\n\n        <SickButton onClick={() => this.showBlocks()}>Add Block</SickButton>\n        <p ref={textarea => (this.textArea = textarea)}>{}</p>\n        {this.props.globalState && (\n          <Clipboard\n            component={SickButton}\n            data-clipboard-text={btoa(\n              JSON.stringify(this.props.globalState.state),\n            )}\n          >\n            copy to clipboard\n          </Clipboard>\n        )}\n\n        <textarea onChange={e => this.handlebase64Update(e)} />\n\n        <SickButton onClick={() => this._updateState()}>\n          {' '}\n          Update State From String\n        </SickButton>\n\n        <ToolbarOverlay />\n\n        {/* <ToolbarOverlay>\n          <SickButton\n            onClick={() => {\n              canvas.addPath();\n            }}\n          >\n            Add Rectangle\n          </SickButton>\n          <SickButton\n            onClick={() => {\n              canvas.clear();\n            }}\n          >\n            Clear\n          </SickButton>\n          <SickButton\n            onClick={() => {\n              canvas.addArrow();\n            }}\n          >\n            Add Arrow\n          </SickButton>\n        </ToolbarOverlay> */}\n      </ToolbarDiv>\n    );\n  }\n}\n\nexport default withContainers([globalState])(Toolbar);\n","import React, { Component } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { Transition } from 'react-spring';\nimport withContainers from '../wrappers/withContainer';\nimport { Global as globalState } from './Global';\n\nconst ToolbarOverlayDiv = styled.div`\n  padding: 40px;\n  background: #edf1f5;\n  position: absolute;\n  transform: translate3d(${props => props.transform3d} + '%', 0, 0);\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`;\n\nclass ToolbarOverlay extends Component {\n  render() {\n    return (\n      <div>\n        {this.props.globalState && (\n          <Transition\n            items={this.props.globalState.state.showToolbarOverlay}\n            from={{\n              opacity: 0,\n            }}\n            enter={{ opacity: 1 }}\n            leave={{ opacity: 0 }}\n          >\n            {show =>\n              show &&\n              (props => (\n                <ToolbarOverlayDiv style={props}>\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"48\"\n                    height=\"48\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"#000000\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"square\"\n                    strokeLinejoin=\"arcs\"\n                    onClick={() =>\n                      this.props.globalState.toggleToolbarOverlay()\n                    }\n                  >\n                    <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\n                    <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\n                  </svg>\n                  {this.props.globalState.state.toolbarOverlayContents}\n                </ToolbarOverlayDiv>\n              ))\n            }\n          </Transition>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withContainers([globalState])(ToolbarOverlay);\n"],"mappings":"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","sourceRoot":""}